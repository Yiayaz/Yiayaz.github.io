<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ Prime 5</title>
      <link href="/posts/C++_Prime_5/"/>
      <url>/posts/C++_Prime_5/</url>
      
        <content type="html"><![CDATA[<p><strong><code>&lt;center&gt;</code> C++ Prime 5  <code>&lt;/center&gt;</code></strong></p><h1 id="习题部分"><a href="#习题部分" class="headerlink" title="习题部分"></a>习题部分</h1><p><a href="https://github.com/Mooophy/Cpp-Primer" target="_blank" rel="noopener">Reference linking 1</a></p><p><a href="https://github.com/fsaadatmand/Cpp-Primer" target="_blank" rel="noopener">Reference linking 2</a></p><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-9"><a href="#1-9" class="headerlink" title="1.9"></a>1.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= <span class="number">100</span>) ans = i++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-10"><a href="#1-10" class="headerlink" title="1.10"></a>1.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &gt;= <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; i-- &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-11"><a href="#1-11" class="headerlink" title="1.11"></a>1.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input two integers\n"</span>);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i &gt;&gt; j;</span><br><span class="line">    <span class="keyword">if</span>(i &gt; j) swap(i,j);</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= j) <span class="built_in">cout</span> &lt;&lt; i++ &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-12"><a href="#1-12" class="headerlink" title="1.12"></a>1.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">-100</span>; i &lt;= <span class="number">100</span>; ++i) sum += i;</span><br><span class="line"><span class="comment">//实际上就是从-100加到100，sum为0</span></span><br></pre></td></tr></table></figure><h3 id="1-14"><a href="#1-14" class="headerlink" title="1.14"></a>1.14</h3><p>实际上表达能力是一样的, 如果按照规范来写for循环,可以尽量缩小局部变量的作用范围.</p><p>for 循环和 while 循环会在 loop statement 前多做一次 conditional jump, do while 则不会.</p><h3 id="1-16"><a href="#1-16" class="headerlink" title="1.16"></a>1.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num))&#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h3><p>C++ guarantees short and int is at least 16 bits, long at least 32 bits, long long at least 64 bits.<br>The signed can represent positive numbers, negative numbers and zero, while unsigned can only represent numbers no less than zero.<br>The C and C++ standards do not specify the representation of float, double and long double. It is possible that all three implemented as IEEE double-precision.</p><h3 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h3><p>use double, or also float.</p><h3 id="2-3-amp-2-4"><a href="#2-3-amp-2-4" class="headerlink" title="2.3 &amp; 2.4"></a>2.3 &amp; 2.4</h3><p>在表达式内如果有了无符号数，最后是一个负值，那么编译器会取模。</p><h3 id="2-5-2-7"><a href="#2-5-2-7" class="headerlink" title="2.5 ~ 2.7"></a>2.5 ~ 2.7</h3><p><img src="/images/C++ Prime 5 &amp; 2.5~2.7.png" alt></p><p>十进制：20 &amp; 八进制：020 &amp; 十六进制：0x20或者0X20</p><h3 id="2-8"><a href="#2-8" class="headerlink" title="2.8"></a>2.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2M"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'2'</span> &lt;&lt; <span class="string">'\t'</span> &lt;&lt; <span class="string">'M'</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-9"><a href="#2-9" class="headerlink" title="2.9"></a>2.9</h3><p>先定义 &amp; 3.14被强转为3 &amp; wage未定义 &amp; 同2</p><h3 id="2-10"><a href="#2-10" class="headerlink" title="2.10"></a>2.10</h3><p>glo_str = “” &amp; glo_int = 0 &amp; loc_int 不确定 &amp; loc_str = “”</p><h3 id="2-11"><a href="#2-11" class="headerlink" title="2.11"></a>2.11</h3><p>定义 &amp; 定义 &amp; 声明</p><h3 id="2-12"><a href="#2-12" class="headerlink" title="2.12"></a>2.12</h3><p><strong>字母+数字+下划线（必须以字母或者下划线开头）</strong></p><p><strong>C++中关于变量命名的规范：</strong></p><ol><li><strong>能体现变量的实际意义</strong></li><li><strong>变量名一般采用小写字母</strong></li><li><strong>用户自定义类名一般以大写字母开头</strong></li><li><strong>多个单词定义的变量名应有区分Student_loan  而不是  Studentloan</strong></li></ol><p>错，double 是关键字 &amp; 对 &amp; 不能带- &amp; 不能数字开头 &amp; 对</p><h3 id="2-13"><a href="#2-13" class="headerlink" title="2.13"></a>2.13</h3><p>j = 100，因为在这个语句块内，局部变量 i(100) 生效，如果想用全局变量 i(42) ，可以使用 j = ::i;</p><h3 id="2-14"><a href="#2-14" class="headerlink" title="2.14"></a>2.14</h3><p>i = 100, sum=45, for循环语句内的i只活在该语句内，而 std::cout 在main语句块内，自然是取得100</p><h3 id="2-15"><a href="#2-15" class="headerlink" title="2.15"></a>2.15</h3><p>可以 &amp; 不行，引用需绑定对象 &amp; 可以 &amp; 不行，引用必须初始化</p><h3 id="2-16"><a href="#2-16" class="headerlink" title="2.16"></a>2.16</h3><p>隐式类型转换</p><h3 id="2-17"><a href="#2-17" class="headerlink" title="2.17"></a>2.17</h3><p>10 10，等于给 i = 5 后 i = 10</p><h3 id="2-18"><a href="#2-18" class="headerlink" title="2.18"></a>2.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b =<span class="number">2</span>, *p = a;</span><br><span class="line">*p = <span class="number">10</span>;<span class="comment">//更改指针所指对象的指</span></span><br><span class="line">p = &amp;b;<span class="comment">//更改指针的值</span></span><br></pre></td></tr></table></figure><h3 id="2-19"><a href="#2-19" class="headerlink" title="2.19"></a>2.19</h3><p>指针自己本身就是一个对象，指针之间可以相互赋值和拷贝，在其生命周期内还可指向不同的对象 &amp; 引用在汇编代码中就是指针常量</p><p>指针无需在定义时初始化 &amp; 引用必须初始化</p><p>指针需要解引用 &amp; 引用不需要</p><h3 id="2-20"><a href="#2-20" class="headerlink" title="2.20"></a>2.20</h3><p>42的平方</p><h3 id="2-21"><a href="#2-21" class="headerlink" title="2.21"></a>2.21</h3><p>非法，类型不一 &amp; 非法，无取地址符号 &amp; 合法</p><h3 id="2-22"><a href="#2-22" class="headerlink" title="2.22"></a>2.22</h3><p>如果指针不是空&amp;如果指针指向的对象的值不是0</p><h3 id="2-24"><a href="#2-24" class="headerlink" title="2.24"></a>2.24</h3><p>因为 long 与 int 类型不匹配，而 void 指针可以接收任意类型的指针</p><p>因为 void 指针只知道头地址，它并不需要该对象的长度</p><h3 id="2-25"><a href="#2-25" class="headerlink" title="2.25"></a>2.25</h3><p>int 指针 ip，int 变量 i，int 引用 r 绑定 i &amp; int 变量 i，int 指针 p 为空 &amp; ip 指针，ip2 变量</p><h3 id="2-26"><a href="#2-26" class="headerlink" title="2.26"></a>2.26</h3><p>错，没有初始化 &amp; 对 &amp; 对 &amp; ++sz 错误，常量不更改</p><h3 id="2-27"><a href="#2-27" class="headerlink" title="2.27"></a>2.27</h3><p>错，引用需要绑定对象 &amp; 如果 i2 不是 const 就对 &amp; 同1 &amp; 对 &amp; 对 &amp; 错，没有引用的 const，引用不是对象 &amp; 对</p><h3 id="2-28"><a href="#2-28" class="headerlink" title="2.28"></a>2.28</h3><p>指针常量需初始化 &amp; 同1 &amp; 常量 ic 需初始化 &amp; 同1 &amp; 对</p><h3 id="2-29"><a href="#2-29" class="headerlink" title="2.29"></a>2.29</h3><p>对 &amp; const int 和 int 不对等 &amp; 同上 &amp; 错，指针常量不能更改其值 &amp; 同上 &amp; 常量不能改变</p><h3 id="2-30"><a href="#2-30" class="headerlink" title="2.30"></a>2.30</h3><p>顶层 &amp; 底层 &amp; 顶层 &amp; 底层</p><h3 id="2-31"><a href="#2-31" class="headerlink" title="2.31"></a>2.31</h3><p>对 &amp; 错，底层 const &amp; 对 &amp; 同2 &amp; 对</p><h3 id="2-32"><a href="#2-32" class="headerlink" title="2.32"></a>2.32</h3><p>*p = nullptr;</p><h3 id="2-33-amp-2-34"><a href="#2-33-amp-2-34" class="headerlink" title="2.33 &amp; 2.34"></a>2.33 &amp; 2.34</h3><p>对 &amp; 对 &amp; 对 &amp; d 是整数指针 *d 就行 &amp; 错，解引用也不行，指向的是常量 &amp; g 是引用，ci 是常量</p><h3 id="2-35"><a href="#2-35" class="headerlink" title="2.35"></a>2.35</h3><p>int &amp; const int 引用 &amp; const int 指针 &amp; const int &amp; 同2</p><h3 id="2-36-amp-2-37"><a href="#2-36-amp-2-37" class="headerlink" title="2.36 &amp; 2.37"></a>2.36 &amp; 2.37</h3><p>c int &amp; d int 引用</p><h3 id="2-38"><a href="#2-38" class="headerlink" title="2.38"></a>2.38</h3><p>decltype 处理顶层 const 和引用的方式与 auto 有些许不同。</p><p>decltype((var)) 的结果永远是引用。</p><p>如果使用的表达式是个变量，则 decltype 返回该变量的类型。</p><p>（包括顶层 const 和引用在内）</p><p>而 auto 会忽略顶层 const，以及直接识别引用绑定的对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, &amp;r = i;</span><br><span class="line"><span class="comment">// same</span></span><br><span class="line"><span class="keyword">auto</span> a = i;</span><br><span class="line"><span class="keyword">decltype</span>(i) b = i;</span><br><span class="line"><span class="comment">// different</span></span><br><span class="line"><span class="keyword">auto</span> c = r;</span><br><span class="line"><span class="keyword">decltype</span>(r) d = i;</span><br></pre></td></tr></table></figure><h3 id="2-39"><a href="#2-39" class="headerlink" title="2.39"></a>2.39</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D:\WorkSpace\C++\Test.cpp:<span class="number">5</span>:<span class="number">2</span>: 错误：结构定义后需要‘;’</span><br><span class="line"> &#125; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line">  ^</span><br><span class="line">  ;</span><br></pre></td></tr></table></figure><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><p>头文件中不应使用using声明，以避免名字冲突</p><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">getline(<span class="built_in">cin</span>,s);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s);</span><br></pre></td></tr></table></figure><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3"></a>3.3</h3><p>对于 string 类的输入函数，它会自动忽略开头的空白（空格、制表符、换行等等），从第一个真正的字符开始直到下一个空白。</p><p>对于 getline() 函数，它会保存字符串中的空白符，它读入数据，直到遇到换行符位置。</p><h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s1 &gt; s2 ? s1 : s2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (s1.size() &gt; s2.size() ? s1 : s2) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="3-5"><a href="#3-5" class="headerlink" title="3.5"></a>3.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 + s2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 + <span class="string">" "</span> + s2 &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c : s)&#123;</span><br><span class="line">    C = <span class="string">'X'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h3><p>没有改变，因为变量只是 char 而不是 char 引用</p><h3 id="3-8"><a href="#3-8" class="headerlink" title="3.8"></a>3.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(i &lt; s.size())&#123;</span><br><span class="line">    s[i++]=<span class="string">'X'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.size();i++)&#123;</span><br><span class="line">    s[i++]=<span class="string">'X'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范围for，写起来快</p><h3 id="3-9"><a href="#3-9" class="headerlink" title="3.9"></a>3.9</h3><p>不合法，越界了，或许确实可以输出一个空格，但是不要这么做</p><h3 id="3-10"><a href="#3-10" class="headerlink" title="3.10"></a>3.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:s)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">ispunct</span>(c))<span class="built_in">cout</span> &lt;&lt; c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-11"><a href="#3-11" class="headerlink" title="3.11"></a>3.11</h3><p>const char&amp;</p><h3 id="3-12"><a href="#3-12" class="headerlink" title="3.12"></a>3.12</h3><p>vector的初始化：</p><p>1：引用不可以成为vector的元素，因为其不是对象。</p><p>2：可以用花括号初始化每一个值。</p><p>3：可以用括号指定元素个数或相同的元素值</p><p>对 &amp; 不对，类型不一 &amp; 对</p><h3 id="3-13"><a href="#3-13" class="headerlink" title="3.13"></a>3.13</h3><p>0 &amp; 10个0 &amp; 10个42 &amp; 10 &amp; 10,42 &amp; 10个“” &amp; 10个“hi”</p><h3 id="3-14-amp-3-15"><a href="#3-14-amp-3-15" class="headerlink" title="3.14 &amp; 3.15"></a>3.14 &amp; 3.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; num) vec.push_back(num);</span><br></pre></td></tr></table></figure><h3 id="3-16"><a href="#3-16" class="headerlink" title="3.16"></a>3.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我选择for循环</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-17"><a href="#3-17" class="headerlink" title="3.17"></a>3.17</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)&#123;</span><br><span class="line">    vec.push_back(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> ch:c)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">toupper</span>(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-18"><a href="#3-18" class="headerlink" title="3.18"></a>3.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ivec.push_back(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><h3 id="3-19"><a href="#3-19" class="headerlink" title="3.19"></a>3.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>,<span class="number">42</span>);<span class="comment">//The best</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123;<span class="number">42</span>,..,<span class="number">42</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">42</span>,...,<span class="number">42</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(a,a+<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="3-20"><a href="#3-20" class="headerlink" title="3.20"></a>3.20</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.size()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; vec[i]+vec[i+<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.size()/<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; vec[i]+vec[n-i<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-21"><a href="#3-21" class="headerlink" title="3.21"></a>3.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我选择for循环</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c = s.cbegin();c != s.cend();c++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-22"><a href="#3-22" class="headerlink" title="3.22"></a>3.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; text;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>,s)) text.push_back(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = text.begin();it != text.end();it++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:*it) c=<span class="built_in">toupper</span>(c);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-23"><a href="#3-23" class="headerlink" title="3.23"></a>3.23</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:vec)&#123;</span><br><span class="line">    c&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-24"><a href="#3-24" class="headerlink" title="3.24"></a>3.24</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i=vec.begin();i!=end()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i+*(i+<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i=vec.begin(),j=vec.end();i!=j;i++,j--)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *i + *j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-25"><a href="#3-25" class="headerlink" title="3.25"></a>3.25</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> c=vec.begin();c!=vec.end();c++)&#123;</span><br><span class="line">    sc[*c/<span class="number">10</span>]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-26"><a href="#3-26" class="headerlink" title="3.26"></a>3.26</h3><p>因为vector迭代器并无加法运算符</p><h3 id="3-27"><a href="#3-27" class="headerlink" title="3.27"></a>3.27</h3><p>对 &amp; 对 &amp; 如果txt_size()函数是constexpr修饰的就可 &amp; 错，‘\0’放不下了</p><h3 id="3-28"><a href="#3-28" class="headerlink" title="3.28"></a>3.28</h3><p>十个“” &amp; 十个0 &amp; 十个“” &amp; 十个随机值</p><h3 id="3-29"><a href="#3-29" class="headerlink" title="3.29"></a>3.29</h3><ol><li>数组初始化必须知道大小</li><li>vector内置函数支持</li><li>vector自动扩容</li></ol><h3 id="3-30"><a href="#3-30" class="headerlink" title="3.30"></a>3.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ix &lt;= array_size <span class="comment">//ix &lt; array_size</span></span><br></pre></td></tr></table></figure><h3 id="3-31"><a href="#3-31" class="headerlink" title="3.31"></a>3.31</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    num[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-32"><a href="#3-32" class="headerlink" title="3.32"></a>3.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(num,num+<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="3-33"><a href="#3-33" class="headerlink" title="3.33"></a>3.33</h3><p>初始值未知，则最终的累加结果并无意义</p><h3 id="3-34"><a href="#3-34" class="headerlink" title="3.34"></a>3.34</h3><p>相当于p1=p2</p><h3 id="3-35"><a href="#3-35" class="headerlink" title="3.35"></a>3.35</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> *p=begin(num);p != end(num);p++)    *p=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="3-36"><a href="#3-36" class="headerlink" title="3.36"></a>3.36</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> *p=begin(num1),*q=begin(num2);p != end(num1)&amp;&amp;q != end(num2);p++,q++)    <span class="keyword">if</span>(*p!=*q)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p=num1.begin(),q=num2.end();p != num1.end()&amp;&amp;q != num2.end();p++,q++)    <span class="keyword">if</span>(*p!=*q)    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="3-37"><a href="#3-37" class="headerlink" title="3.37"></a>3.37</h3><p>hello，按字节输出</p><h3 id="3-38"><a href="#3-38" class="headerlink" title="3.38"></a>3.38</h3><p>两个地址相加得到的地址没什么实际意义，除非是目标地址就是这两个地址相加才能得到的，但这实在是没啥意义。</p><h3 id="3-39"><a href="#3-39" class="headerlink" title="3.39"></a>3.39</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s1==s2);</span><br><span class="line"><span class="keyword">auto</span> ans = <span class="built_in">strcmp</span>(s1,s2);</span><br></pre></td></tr></table></figure><h3 id="3-40"><a href="#3-40" class="headerlink" title="3.40"></a>3.40</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> s1[] = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> s2[] = <span class="string">"world!"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">size_t</span> n = <span class="built_in">strlen</span>(s1) + <span class="built_in">strlen</span>(<span class="string">" "</span>) + <span class="built_in">strlen</span>(s2) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span>* s3 = <span class="keyword">new</span> <span class="keyword">char</span>[n];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">strcpy</span>(s3, s1);</span><br><span class="line"><span class="built_in">strcat</span>(s3, <span class="string">" "</span>);</span><br><span class="line"><span class="built_in">strcat</span>(s3, s2);</span><br></pre></td></tr></table></figure><h3 id="3-41"><a href="#3-41" class="headerlink" title="3.41"></a>3.41</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(num,num+<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="3-42"><a href="#3-42" class="headerlink" title="3.42"></a>3.42</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec.size();i++)    num[i] = vec[i];</span><br></pre></td></tr></table></figure><h3 id="3-43"><a href="#3-43" class="headerlink" title="3.43"></a>3.43</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[<span class="number">3</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;;</span><br><span class="line"><span class="comment">// 用于管理迭代的范围</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">int</span>(&amp;p)[<span class="number">4</span>] : ia)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q : p) <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用下标的普通for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4</span>; ++j) <span class="built_in">cout</span> &lt;&lt; ia[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span>(*p)[<span class="number">4</span>] = ia; p != ia + <span class="number">3</span>; ++p)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>* q = *p; q != *p + <span class="number">4</span>; ++q) <span class="built_in">cout</span> &lt;&lt; *q &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure><h3 id="3-44"><a href="#3-44" class="headerlink" title="3.44"></a>3.44</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用类型别名</span></span><br><span class="line"><span class="keyword">using</span> int_array = <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int_array&amp; p : ia)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q : p) <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int_array* p = ia; p != ia + <span class="number">3</span>; ++p)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>* q = *p; q != *p + <span class="number">4</span>; ++q) <span class="built_in">cout</span> &lt;&lt; *q &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure><h3 id="3-45"><a href="#3-45" class="headerlink" title="3.45"></a>3.45</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; p : ia)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q : p) <span class="built_in">cout</span> &lt;&lt; q &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>* p = ia; p != ia + <span class="number">3</span>; ++p)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span>* q = *p; q != *p + <span class="number">4</span>; ++q) <span class="built_in">cout</span> &lt;&lt; *q &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h3><p>105</p><h3 id="4-2"><a href="#4-2" class="headerlink" title="4.2"></a>4.2</h3><p><em>(vec.begin()) &amp; </em>(vec.begin())+1</p><h3 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h3><p>可以，编写者自己用括号强制约定就行，可读性也强</p><h3 id="4-4"><a href="#4-4" class="headerlink" title="4.4"></a>4.4</h3><p>((12 / 3) <em> 4) + (5 </em> 15) +((24 % 4) / 2) = 91</p><h3 id="4-5"><a href="#4-5" class="headerlink" title="4.5"></a>4.5</h3><p>-86 &amp; -18 &amp; 0 &amp; -2</p><h3 id="4-6"><a href="#4-6" class="headerlink" title="4.6"></a>4.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(num ^ <span class="number">1</span> == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="4-7"><a href="#4-7" class="headerlink" title="4.7"></a>4.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a = <span class="number">32768</span>;</span><br><span class="line"><span class="keyword">unsigned</span> a = <span class="number">-10</span>;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">123456789</span>*<span class="number">123456789</span>;</span><br></pre></td></tr></table></figure><h3 id="4-8"><a href="#4-8" class="headerlink" title="4.8"></a>4.8</h3><p>逻辑与：左面为真再判断右面</p><p>逻辑或：先判断左面为假再判断右面</p><p>相等性运算符：右边的转换为左边的类型再与左边比较</p><h3 id="4-9"><a href="#4-9" class="headerlink" title="4.9"></a>4.9</h3><p>先看cp是否是空指针，随后看cp所指向的地方是否为空</p><h3 id="4-10"><a href="#4-10" class="headerlink" title="4.10"></a>4.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; num &amp;&amp; num != <span class="number">42</span>);</span><br></pre></td></tr></table></figure><h3 id="4-11"><a href="#4-11" class="headerlink" title="4.11"></a>4.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a&gt;b?(b&gt;c?(c&gt;d?<span class="literal">true</span>:<span class="literal">false</span>):<span class="literal">false</span>):<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="4-12"><a href="#4-12" class="headerlink" title="4.12"></a>4.12</h3><p>判断i是否为相应时刻(j&lt;k)的0或者1</p><h3 id="4-13"><a href="#4-13" class="headerlink" title="4.13"></a>4.13</h3><p>3.0 &amp; 3 &amp; 3 &amp; 3.5</p><h3 id="4-14"><a href="#4-14" class="headerlink" title="4.14"></a>4.14</h3><p>右值不可放在表达式左侧 &amp; 恒为true</p><h3 id="4-15"><a href="#4-15" class="headerlink" title="4.15"></a>4.15</h3><p>非法，得先让pi指向某个int类型的左值，然后把表达式改为dval = ival = *pi = 0即可。</p><h3 id="4-16"><a href="#4-16" class="headerlink" title="4.16"></a>4.16</h3><p>!=优先级高于=，(p = getPtr()) != 0 &amp; 恒为true，if(i == 1024)</p><h3 id="4-17"><a href="#4-17" class="headerlink" title="4.17"></a>4.17</h3><p>前置返回i+1，后置返回i然后再+1</p><h3 id="4-18"><a href="#4-18" class="headerlink" title="4.18"></a>4.18</h3><p>第一个没有输出，并且还会输出v.end()</p><h3 id="4-19"><a href="#4-19" class="headerlink" title="4.19"></a>4.19</h3><p>指针不为空且指针里不为空并往下一步走 &amp; 后两个改成ival+1</p><h3 id="4-20"><a href="#4-20" class="headerlink" title="4.20"></a>4.20</h3><p>解引用后迭代器+1 &amp; 迭代器里的是string无法自增 &amp; 不合法，iter无法使用点运算符 &amp; iter指向的是否为空 &amp; string无自增 &amp; iter指向是否为空，然后迭代器加一</p><h3 id="4-21"><a href="#4-21" class="headerlink" title="4.21"></a>4.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:vec)    c % <span class="number">2</span> ? c *= <span class="number">2</span> : c;</span><br></pre></td></tr></table></figure><h3 id="4-22"><a href="#4-22" class="headerlink" title="4.22"></a>4.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只用条件运算符</span></span><br><span class="line"><span class="built_in">string</span> Sscore = score &lt; <span class="number">60</span> ? <span class="string">"fail"</span> : (score &lt; <span class="number">75</span> ? <span class="string">"low pass"</span> : (score &lt; <span class="number">90</span> ? <span class="string">"pass"</span> : <span class="string">"high pass"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//用if语句</span></span><br><span class="line"><span class="keyword">if</span>(score&lt;<span class="number">60</span>)    Sscore = <span class="string">"fail"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">75</span>)    Sscore = <span class="string">"low pass"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(score&lt;<span class="number">90</span>)    Sscore = <span class="string">"pass"</span>;</span><br><span class="line"><span class="keyword">else</span>    Sscore = <span class="string">"high pass"</span>;</span><br></pre></td></tr></table></figure><h3 id="4-23"><a href="#4-23" class="headerlink" title="4.23"></a>4.23</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"word"</span>;</span><br><span class="line"><span class="built_in">string</span> p1 = s + (s[s.size() - <span class="number">1</span>] == <span class="string">'s'</span> ? <span class="string">""</span> : <span class="string">"s"</span>);</span><br></pre></td></tr></table></figure><h3 id="4-24"><a href="#4-24" class="headerlink" title="4.24"></a>4.24</h3><p>Since we are nesting conditional operations, we are essentially grouping expressions with each others using operators of equal precedence, i.e., two ?: operators. Here, the rules of associativity dictates how the expressions of these operators are grouped together and eventually evaluated. Right associativity means that they will be grouped from right to left as such:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finalgrade = (grade &gt; <span class="number">90</span>) ? <span class="string">"high pass"</span> : ((grade &lt; <span class="number">60</span>) ? <span class="string">"fail"</span> : <span class="string">"pass"</span>);</span><br></pre></td></tr></table></figure><p>Note how this grouping means that outer conditional operation will not be evaluated until the inner one is evaluated first, if the grade is less than or equal to 90.</p><p>If the operator were left associative we would have the following grouping instead:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finalgrade = ((grade &gt; <span class="number">90</span>) ? <span class="string">"high pass"</span> : (grade &lt; <span class="number">60</span>)) ? <span class="string">"fail"</span> : <span class="string">"pass"</span>;</span><br></pre></td></tr></table></figure><p>This would result in a compile error because the outer conditional operator would have incompatible operand types: const char * and bool.</p><h3 id="4-25"><a href="#4-25" class="headerlink" title="4.25"></a>4.25</h3><p>-7296</p><h3 id="4-26"><a href="#4-26" class="headerlink" title="4.26"></a>4.26</h3><p>The C++ standard does not specify the size of integral types in bytes, but it specifies minimum ranges they must be able to hold. The minimum range of <code>unsigned int</code> is 0 to 65535. Since some implementations use only the minimum 16 bits for <code>unsigned int</code>, this could cause undefined behavior.</p><h3 id="4-27"><a href="#4-27" class="headerlink" title="4.27"></a>4.27</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ull = <span class="number">3</span>, ul2 = <span class="number">7</span>;<span class="comment">// 0101 0111</span></span><br><span class="line"><span class="number">0101</span> &amp; <span class="number">0111</span> &amp; <span class="literal">true</span> &amp; <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="4-28"><a href="#4-28" class="headerlink" title="4.28"></a>4.28</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by using method below only include what is needed.</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// void type</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"void: nullptr_t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">std</span>::<span class="keyword">nullptr_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// boolean type</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"bool:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// charactor type</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"char:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"wchar_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"char16_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char16_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"char32_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char32_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// integers type</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"short:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"long:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"long long:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// floating point type</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"float:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"double:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"long double:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fixed width integers</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int8_t:\t\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int8_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"uint8_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">uint8_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int16_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int16_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"uint16_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">uint16_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int32_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"uint32_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int64_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int64_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"uint64_t:\t"</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">uint64_t</span>) &lt;&lt; <span class="string">" bytes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="4-29"><a href="#4-29" class="headerlink" title="4.29"></a>4.29</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x[<span class="number">10</span>];   <span class="keyword">int</span> *p = x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(x)/<span class="keyword">sizeof</span>(*x) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//10</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p)/<span class="keyword">sizeof</span>(*p) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="4-30"><a href="#4-30" class="headerlink" title="4.30"></a>4.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sizeof</span> x + y      <span class="comment">// (sizeof x)+y . "sizeof" has higher precedence than binary `+`.</span></span><br><span class="line"><span class="keyword">sizeof</span> p-&gt;mem[i]  <span class="comment">// sizeof(p-&gt;mem[i])</span></span><br><span class="line"><span class="keyword">sizeof</span> a &lt; b      <span class="comment">// sizeof(a) &lt; b</span></span><br><span class="line"><span class="function"><span class="keyword">sizeof</span> <span class="title">f</span><span class="params">()</span>        <span class="comment">//If `f()` returns `void`, this statement is undefined, otherwise it returns the size of return type.</span></span></span><br></pre></td></tr></table></figure><h3 id="4-31"><a href="#4-31" class="headerlink" title="4.31"></a>4.31</h3><p>Advice: Use Postfix Operators only When Necessary</p><p>Readers from a C background might be surprised that we use the prefix increment in the programs we’ve written. The reason is simple: The prefix version avoids unnecessary work. It increments the value and returns the incremented version.The postfix operator must store the original value so that it can return the unincremented value as its result. If we don’t need the unincremented value, there’s no need for the extra work done by the postfix operator.</p><p>For ints and pointers, the compiler can optimize away this extra work. For more complicated iterator types, this extra work potentially might be more costly. By habitually using the prefix versions, we do not have to worry about whether the performance difference matters. Moreover—and perhaps more importantly—we can express the intent of our programs more directly.</p><h3 id="4-32"><a href="#4-32" class="headerlink" title="4.32"></a>4.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> size = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> ia[size] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> *ptr = ia, ix = <span class="number">0</span>;</span><br><span class="line">    ix != size &amp;&amp; ptr != ia+size;</span><br><span class="line">    ++ix, ++ptr) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">//ptr is a point, but ix is a int var</span></span><br></pre></td></tr></table></figure><h3 id="4-33"><a href="#4-33" class="headerlink" title="4.33"></a>4.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">someValue ? ++x, ++y : --x, --y</span><br><span class="line"><span class="comment">//which is same as (someValue ? ++x, ++y : --x), --y</span></span><br></pre></td></tr></table></figure><h3 id="4-34"><a href="#4-34" class="headerlink" title="4.34"></a>4.34</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fval);<span class="comment">// float converted to bool</span></span><br><span class="line">dval = fval + ival;<span class="comment">// int converter to float, then the result converted to double</span></span><br><span class="line">dval + ival * cval;<span class="comment">// char converted to int, then the result converter to double</span></span><br></pre></td></tr></table></figure><h3 id="4-35"><a href="#4-35" class="headerlink" title="4.35"></a>4.35</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cval = <span class="string">'a'</span> + <span class="number">3</span>;<span class="comment">// char converted to int, then the result(int) converted to char</span></span><br><span class="line">fval = ui - ival * <span class="number">1.0</span>;<span class="comment">// int converted to double, the ui converted to double, the result converted to float</span></span><br><span class="line">dval = ui * fval;<span class="comment">// ui converted to float, then the result converted to double</span></span><br><span class="line">cval = ival + fval + dval;<span class="comment">// ival converted to float, float converted to double, double converted to char</span></span><br></pre></td></tr></table></figure><h3 id="4-36"><a href="#4-36" class="headerlink" title="4.36"></a>4.36</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i*=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt; d;</span><br></pre></td></tr></table></figure><h3 id="4-37"><a href="#4-37" class="headerlink" title="4.37"></a>4.37</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;<span class="keyword">double</span> d;<span class="keyword">const</span> <span class="built_in">string</span> *ps;<span class="keyword">char</span> *pc;<span class="keyword">void</span> *pv;</span><br><span class="line">pv = (<span class="keyword">void</span>*)ps;<span class="comment">// pv = static_cast&lt;void*&gt;(const_cast&lt;string*&gt; ps);</span></span><br><span class="line">i = <span class="keyword">int</span>(*pc);<span class="comment">// i = static_cast&lt;int&gt;(*pc);</span></span><br><span class="line">pv = &amp;d;<span class="comment">// pv = static_cast&lt;void*&gt;(&amp;d);</span></span><br><span class="line">pc = (<span class="keyword">char</span>*) pv;<span class="comment">// pc = static_cast&lt;char*&gt;(pv);</span></span><br></pre></td></tr></table></figure><h3 id="4-38"><a href="#4-38" class="headerlink" title="4.38"></a>4.38</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> slope = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(j/i);<span class="comment">//the result of (j/i) converted to double and assigned to slope</span></span><br></pre></td></tr></table></figure><h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h3 id="5-1"><a href="#5-1" class="headerlink" title="5.1"></a>5.1</h3><p>To be used as spaceholder</p><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><p>块是用花括号括起来的（可能为空的）语句和声明的序列 &amp; 如果在程序的某个地方，语法上需要一条语句，但是逻辑上需要多条语句，那就用块</p><h3 id="5-3"><a href="#5-3" class="headerlink" title="5.3"></a>5.3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(val &lt;= <span class="number">10</span>)</span><br><span class="line">    sum+=val,++val;</span><br></pre></td></tr></table></figure><h3 id="5-4"><a href="#5-4" class="headerlink" title="5.4"></a>5.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>::iterator iter;</span><br><span class="line"><span class="keyword">while</span>(iter != s.end())&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> status;</span><br><span class="line"><span class="keyword">while</span>(status = find(word))&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(!status)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5"><a href="#5-5" class="headerlink" title="5.5"></a>5.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; stu&#123;<span class="number">50</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="number">100</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; sc&#123;<span class="string">"F"</span>, <span class="string">"E"</span>, <span class="string">"D"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>, <span class="string">"A"</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : stu)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt; <span class="number">60</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sc[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sc[(c - <span class="number">50</span>) / <span class="number">10</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6"><a href="#5-6" class="headerlink" title="5.6"></a>5.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c &lt; <span class="number">60</span> ? sc[<span class="number">0</span>] : sc[(c<span class="number">-50</span>)/<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="5-7"><a href="#5-7" class="headerlink" title="5.7"></a>5.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ival1 != ival2)</span><br><span class="line">    ival1 = ival2;<span class="comment">// add a ';'</span></span><br><span class="line"><span class="keyword">else</span> ival1 = ival2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ival &lt; minval)&#123;</span><br><span class="line">    minval = ival;</span><br><span class="line">    occurs = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ival;</span><br><span class="line"><span class="keyword">if</span>(ival=get_value())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ival= "</span> &lt;&lt; ival &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"ival = 0\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ival = <span class="number">0</span>)</span><br><span class="line">    ival = get_value();</span><br></pre></td></tr></table></figure><h3 id="5-8"><a href="#5-8" class="headerlink" title="5.8"></a>5.8</h3><p>if 比 else 多的时候， else 会与最近的 if 配套</p><h3 id="5-9"><a href="#5-9" class="headerlink" title="5.9"></a>5.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> aCnt = <span class="number">0</span>, eCnt = <span class="number">0</span>, iCnt = <span class="number">0</span>, oCnt = <span class="number">0</span>, uCnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'a'</span>) ++aCnt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'e'</span>) ++eCnt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'i'</span>) ++iCnt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'o'</span>) ++oCnt;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'u'</span>) ++uCnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-10"><a href="#5-10" class="headerlink" title="5.10"></a>5.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ch)</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">            ++aCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">            ++eCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">            ++iCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'O'</span>:</span><br><span class="line">            ++oCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'U'</span>:</span><br><span class="line">            ++uCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-11"><a href="#5-11" class="headerlink" title="5.11"></a>5.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; <span class="built_in">std</span>::noskipws &gt;&gt; ch)<span class="comment">// noskipws, 不忽略任意地方的空格</span></span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">            ++aCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">            ++eCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">            ++iCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'O'</span>:</span><br><span class="line">            ++oCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'U'</span>:</span><br><span class="line">            ++uCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">            ++spaceCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">            ++tabCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">            ++newLineCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-12"><a href="#5-12" class="headerlink" title="5.12"></a>5.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; <span class="built_in">std</span>::noskipws &gt;&gt; ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'A'</span>:</span><br><span class="line">            ++aCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'E'</span>:</span><br><span class="line">            ++eCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">            <span class="keyword">if</span> (prech == <span class="string">'f'</span>) ++fiCnt;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">            ++iCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'O'</span>:</span><br><span class="line">            ++oCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'U'</span>:</span><br><span class="line">            ++uCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</span><br><span class="line">            ++spaceCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">            ++tabCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">            ++newLineCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">            <span class="keyword">if</span> (prech == <span class="string">'f'</span>) ++ffCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">            <span class="keyword">if</span> (prech == <span class="string">'f'</span>) ++flCnt;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prech = ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-13"><a href="#5-13" class="headerlink" title="5.13"></a>5.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> aCnt = <span class="number">0</span>, eCnt = <span class="number">0</span>, iouCnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch = next_text();</span><br><span class="line"><span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'a'</span>: aCnt++;<span class="comment">// break;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'e'</span>: eCnt++;<span class="comment">// break;</span></span><br><span class="line">    <span class="keyword">default</span>: iouCnt++;<span class="comment">// break;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> index = some_value();</span><br><span class="line"><span class="keyword">int</span> ix;<span class="comment">// add a statement</span></span><br><span class="line"><span class="keyword">switch</span> (index) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        ix = get_value();</span><br><span class="line">        ivec[ ix ] = index;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ix = ivec.size()<span class="number">-1</span>;</span><br><span class="line">        ivec[ ix ] = index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> evenCnt = <span class="number">0</span>, oddCnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> digit = get_num() % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">switch</span> (digit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>:</span><br><span class="line">        oddcnt++;<span class="comment">// oddCnt</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>:</span><br><span class="line">        evencnt++;<span class="comment">// evenCnt</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> ival=<span class="number">512</span>, jval=<span class="number">1024</span>, kval=<span class="number">4096</span>;</span><br><span class="line"><span class="comment">// case label must be a constant expression</span></span><br><span class="line"><span class="keyword">unsigned</span> bufsize;</span><br><span class="line"><span class="keyword">unsigned</span> swt = get_bufCnt();</span><br><span class="line"><span class="keyword">switch</span>(swt) &#123;</span><br><span class="line">    <span class="keyword">case</span> ival:</span><br><span class="line">        bufsize = ival * <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> jval:</span><br><span class="line">        bufsize = jval * <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> kval:</span><br><span class="line">        bufsize = kval * <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-14"><a href="#5-14" class="headerlink" title="5.14"></a>5.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; max_duplicated;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span> str, prestr; <span class="built_in">cin</span> &gt;&gt; str; prestr = str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == prestr)</span><br><span class="line">        ++count;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (count &gt; max_duplicated.second)</span><br><span class="line">        max_duplicated = &#123;prestr, count&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (max_duplicated.first.empty())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"There's no duplicated string."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the word "</span> &lt;&lt; max_duplicated.first &lt;&lt; <span class="string">" occurred "</span> &lt;&lt; max_duplicated.second + <span class="number">1</span> &lt;&lt; <span class="string">" times. "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="5-15"><a href="#5-15" class="headerlink" title="5.15"></a>5.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ix;</span><br><span class="line"><span class="keyword">for</span>(ix = <span class="number">0</span>; ix != sz; ++ix)&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(ix != sz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ix;</span><br><span class="line"><span class="keyword">for</span>(; ix != sz; ++ix)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ix = <span class="number">0</span>; ix != sz; ++ix)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-16"><a href="#5-16" class="headerlink" title="5.16"></a>5.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// same as for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="built_in">cin</span> &gt;&gt; i;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// same as while</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != size)</span><br><span class="line">    ++i;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用for循环更舒服一些，毕竟可以规定局部变量的生命期，虽然可读性会差一些。</span></span><br></pre></td></tr></table></figure><h3 id="5-17"><a href="#5-17" class="headerlink" title="5.17"></a>5.17</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_pre</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;l, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l.size()&gt;r.size())</span><br><span class="line">        <span class="keyword">return</span> is_pre(r,l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l[i]!=r[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (is_pre(l,r) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-18"><a href="#5-18" class="headerlink" title="5.18"></a>5.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v1, v2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter two numbers to sum:"</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">cin</span> &gt;&gt; v1 &gt;&gt; v2)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sum is: "</span> &lt;&lt; v1 + v2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="built_in">cin</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;<span class="keyword">while</span>(ival = get_response());</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ival = get_response();</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    ival = get_response();</span><br><span class="line">&#125;<span class="keyword">while</span>(ival);<span class="comment">// while(ival)中的ival和do&#123;&#125;中的ival不在一个作用域中</span></span><br></pre></td></tr></table></figure><h3 id="5-19"><a href="#5-19" class="headerlink" title="5.19"></a>5.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input two string:\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (s1.size() &gt; s2.size() ? s2 : s1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Do you wanna continue?(yes or no)\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s1;</span><br><span class="line">&#125;<span class="keyword">while</span>(!s1.empty() &amp;&amp; <span class="built_in">tolower</span>(s1[<span class="number">0</span>]==<span class="string">'y'</span>));</span><br></pre></td></tr></table></figure><h3 id="5-20"><a href="#5-20" class="headerlink" title="5.20"></a>5.20</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> re,t;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; re)</span><br><span class="line">    <span class="keyword">if</span>(re == t)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t=re;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cin</span>.eof())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No repeated"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="5-21"><a href="#5-21" class="headerlink" title="5.21"></a>5.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> curr, prev;</span><br><span class="line"><span class="keyword">bool</span> no_twice = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; curr) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isupper</span>(curr[<span class="number">0</span>]) &amp;&amp; prev == curr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; curr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        no_twice = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    prev = curr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (no_twice)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"no word was repeated."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="5-22"><a href="#5-22" class="headerlink" title="5.22"></a>5.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> sz = get_size(); sz &lt;= <span class="number">0</span>; sz = get_size());</span><br></pre></td></tr></table></figure><h3 id="5-23-5-25"><a href="#5-23-5-25" class="headerlink" title="5.23 ~ 5.25"></a>5.23 ~ 5.25</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; i &gt;&gt; j;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i / j &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)<span class="comment">// 5.24</span></span><br><span class="line">    <span class="keyword">throw</span> runtime_error(<span class="string">"divisor is 0"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i / j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i, j; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input two integers:\n"</span>, <span class="built_in">cin</span> &gt;&gt; i &gt;&gt; j; )<span class="comment">// 5.25</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span> </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">throw</span> runtime_error(<span class="string">"divisor is 0"</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i / j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (runtime_error err) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; err.what() &lt;&lt; <span class="string">"\nTry again? Enter y or n"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span> || c == <span class="string">'n'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="6-1"><a href="#6-1" class="headerlink" title="6.1"></a>6.1</h3><p>形参:在函数参数表中声明的局部变量，它们由函数调用中提供的实参初始化</p><p>实参:函数调用中提供的用于初始化函数形参的值</p><h3 id="6-2"><a href="#6-2" class="headerlink" title="6.2"></a>6.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;<span class="comment">// string f()</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">    <span class="keyword">return</span> s;<span class="comment">// string != int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3"><a href="#6-3" class="headerlink" title="6.3"></a>6.3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="function">runtime_error <span class="title">err</span><span class="params">(<span class="string">"Input cannot be a negative number"</span>)</span></span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; err.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i &gt; <span class="number">1</span> ? i * fact(i<span class="number">-1</span>) : i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4"><a href="#6-4" class="headerlink" title="6.4"></a>6.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a number\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fact(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5"><a href="#6-5" class="headerlink" title="6.5"></a>6.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAbs</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> -i;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6"><a href="#6-6" class="headerlink" title="6.6"></a>6.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> count_add(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> ctr = <span class="number">0</span>;</span><br><span class="line">    ctr += n;</span><br><span class="line">    <span class="keyword">return</span> ctr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; count_add(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7"><a href="#6-7" class="headerlink" title="6.7"></a>6.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> count_add(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">size_t</span> ctr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ctr++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8"><a href="#6-8" class="headerlink" title="6.8"></a>6.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Chapter6.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function">T <span class="title">abs</span><span class="params">(T i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i &gt;= <span class="number">0</span> ? i : -i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9"><a href="#6-9" class="headerlink" title="6.9"></a>6.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fact.cc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Chapter6.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (val == <span class="number">0</span> || val == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> val * fact(val<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, ret = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"input a number: "</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">1</span>) ret *= n--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//factMain.cc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Chapter6.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"5! is "</span> &lt;&lt; fact(<span class="number">5</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; func() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">abs</span>(<span class="number">-9.78</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-10"><a href="#6-10" class="headerlink" title="6.10"></a>6.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> *q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = *p;</span><br><span class="line">    *p = *q;</span><br><span class="line">    *q = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; i &gt;&gt; j;</span><br><span class="line">    swap(&amp;i,&amp;j);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; j;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-11"><a href="#6-11" class="headerlink" title="6.11"></a>6.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span>&#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    reset(i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-12"><a href="#6-12" class="headerlink" title="6.12"></a>6.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;l,<span class="keyword">int</span> &amp;r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = l;</span><br><span class="line">    l = r;</span><br><span class="line">    r = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 引用不用解引用，也不用拷贝</span></span><br></pre></td></tr></table></figure><h3 id="6-13"><a href="#6-13" class="headerlink" title="6.13"></a>6.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T)</span></span>;<span class="comment">// 只传值，不影响实参</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(&amp;T)</span></span>; <span class="comment">// 影响实参</span></span><br></pre></td></tr></table></figure><h3 id="6-14"><a href="#6-14" class="headerlink" title="6.14"></a>6.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">(<span class="keyword">int</span> &amp;i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator begin, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = begin; iter != end; ++iter)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-15"><a href="#6-15" class="headerlink" title="6.15"></a>6.15</h3><p>函数不修改 s 的值，但是 occurs 的值是会变化的 &amp; 因为 c 可能是个临时变量 &amp; 那 s 就可能被改变 &amp; 无法改变 occurs 的值，occurs = 0 就会报错</p><h3 id="6-16"><a href="#6-16" class="headerlink" title="6.16"></a>6.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-17"><a href="#6-17" class="headerlink" title="6.17"></a>6.17</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hav_up</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isupper</span>(c))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">toUpperString</span><span class="params">(<span class="built_in">string</span>&amp; s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; c:s)&#123;</span><br><span class="line">        c = <span class="built_in">toupper</span>(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-18"><a href="#6-18" class="headerlink" title="6.18"></a>6.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(matrix &amp;a,matrix &amp;b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::<span class="function">iterator <span class="title">change_val</span><span class="params">(<span class="keyword">int</span> a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator b)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="6-19"><a href="#6-19" class="headerlink" title="6.19"></a>6.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;,<span class="keyword">char</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">calc(<span class="number">23.4</span>,<span class="number">55.1</span>);<span class="comment">// 多了个参数</span></span><br><span class="line">count(<span class="string">"abcda"</span>,<span class="string">'a'</span>);</span><br><span class="line">calc(<span class="number">66</span>);</span><br><span class="line">sum(vec.begin(),vec.end(),<span class="number">3.8</span>);</span><br></pre></td></tr></table></figure><h3 id="6-20"><a href="#6-20" class="headerlink" title="6.20"></a>6.20</h3><p>If we can use <code>const</code>, just use it. If we make a parameter a plain reference when it could be a reference to <code>const</code>, the reference value maybe changed.</p><h3 id="6-21"><a href="#6-21" class="headerlink" title="6.21"></a>6.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">com</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; *b ? a : *b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-22"><a href="#6-22" class="headerlink" title="6.22"></a>6.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>*&amp; p,<span class="keyword">int</span>*&amp; q)</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> t = p;</span><br><span class="line">    p = q;</span><br><span class="line">    q = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-23"><a href="#6-23" class="headerlink" title="6.23"></a>6.23</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p)</span><br><span class="line">        <span class="keyword">while</span>(*p)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *p++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* beg,<span class="keyword">const</span> <span class="keyword">int</span>* end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(beg != end)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *beg++ &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> a[],<span class="keyword">size_t</span> size)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i &lt; size;i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> (&amp;arr)[<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:arr)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">5</span>] = <span class="string">"test"</span>;</span><br><span class="line">    print(&amp;i);</span><br><span class="line">    print(ch);</span><br><span class="line">    print(begin(j),end(j));</span><br><span class="line">    print(j,end(j)-begin(j));</span><br><span class="line">    print(j);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-24"><a href="#6-24" class="headerlink" title="6.24"></a>6.24</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> (&amp;a)[<span class="number">10</span>])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i != <span class="number">10</span>;++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-25-amp-6-26"><a href="#6-25-amp-6-26" class="headerlink" title="6.25 &amp; 6.26"></a>6.25 &amp; 6.26</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != argc; ++i)</span><br><span class="line">        str += <span class="built_in">std</span>::<span class="built_in">string</span>(argv[i]) + <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-27"><a href="#6-27" class="headerlink" title="6.27"></a>6.27</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;initialzer_list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(initialzer_list&lt;<span class="keyword">int</span>&gt; <span class="keyword">const</span>&amp; il)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:il)</span><br><span class="line">        sum += i;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> il = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum(il) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-28"><a href="#6-28" class="headerlink" title="6.28"></a>6.28</h3><p><code>const string&amp;</code></p><h3 id="6-29"><a href="#6-29" class="headerlink" title="6.29"></a>6.29</h3><p>Depends on the type of elements of <code>initializer_list</code>. When the type is <a href="http://en.cppreference.com/w/cpp/concept/PODType" target="_blank" rel="noopener">PODType</a>, reference is unnecessary. Because <code>POD</code> is <strong>cheap to copy</strong> (such as <code>int</code>). Otherwise, Using reference(<code>const</code>) is the better choice.</p><h3 id="6-30"><a href="#6-30" class="headerlink" title="6.30"></a>6.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">str_subrange</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;str1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;str2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str1.size() == str2.size())</span><br><span class="line">        <span class="keyword">return</span> str1 == str2;</span><br><span class="line">    <span class="keyword">auto</span> size = (str1.size() &lt; str2.size()) ? str1.size() : str2.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">decltype</span>(size) i = <span class="number">0</span>; i != size; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str1[i] != str2[i])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D:\WorkSpace\C++\Test.cpp: 在函数‘bool str_subrange(const string&amp;, const string&amp;)’中:</span></span><br><span class="line"><span class="comment">D:\WorkSpace\C++\Test.cpp:38:13: 错误：在返回‘bool’的函数中，返回语句不带返回值 [-fpermissive]</span></span><br><span class="line"><span class="comment">             return;</span></span><br><span class="line"><span class="comment">             ^~~~~~</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="6-31"><a href="#6-31" class="headerlink" title="6.31"></a>6.31</h3><p>It is valid to return a reference when the reference does not refer to a local object. The Same applies for a reference to const, but only when the returned value is not expected to be an lvalue.</p><h3 id="6-32"><a href="#6-32" class="headerlink" title="6.32"></a>6.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">get</span><span class="params">(<span class="keyword">int</span> *arry, <span class="keyword">int</span> index)</span></span>&#123;<span class="keyword">return</span> arry[index];&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ia[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">10</span>; ++i)</span><br><span class="line">        get(ia, i) = i;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// legal, it gave the values (0 ~ 9) to array ia.</span></span><br></pre></td></tr></table></figure><h3 id="6-33"><a href="#6-33" class="headerlink" title="6.33"></a>6.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Iter = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::const_iterator;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Iter first, Iter last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first != last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *first &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        print(++first, last);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-34"><a href="#6-34" class="headerlink" title="6.34"></a>6.34</h3><p>When the recursion termination condition becomes <code>var != 0</code>, two situations can happen :</p><ul><li>case 1 : If the argument is positive, recursion stops at 0.(Note : There is one extra multiplication step though as the combined expression for factorial(5) reads 5 <em> 4 </em> 3 <em> 2 </em> 1 * 1. In terms of programming languages learning, such subtle difference probably looks quite trivial. In algorithms analysis and proof, however, this extra step may be super important.)</li><li>case 2 : if the argument is negative, recursion would never stop. As a result, a stack overflow would occur.</li></ul><h3 id="6-35"><a href="#6-35" class="headerlink" title="6.35"></a>6.35</h3><p><code>val--</code> 的值是 <code>val</code> , 陷入死循环</p><h3 id="6-36-amp-6-37"><a href="#6-36-amp-6-37" class="headerlink" title="6.36 &amp; 6.37"></a>6.36 &amp; 6.37</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> (&amp;fun(<span class="built_in">string</span> (&amp;arr)[<span class="number">10</span>]))[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span>[<span class="number">10</span>] strarr;</span><br><span class="line"><span class="keyword">using</span> strarr = <span class="built_in">string</span>[<span class="number">10</span>];</span><br><span class="line"><span class="function">strarr &amp;<span class="title">fun</span><span class="params">(strarr&amp; arr)</span></span>;</span><br><span class="line"></span><br><span class="line">auto fun(strarr&amp; arr) -&gt; string(&amp;)[10];</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>[<span class="number">10</span>] sarr;</span><br><span class="line"><span class="keyword">decltype</span>(sarr) &amp;fun(strarr&amp; arr);</span><br></pre></td></tr></table></figure><h3 id="6-38"><a href="#6-38" class="headerlink" title="6.38"></a>6.38</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> odd[] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> even[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">decltype</span>(odd) &amp;arrPtr(<span class="keyword">int</span> i)&#123;</span><br><span class="line">    <span class="keyword">return</span> (i % <span class="number">2</span>) ? &amp;odd : &amp;even;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-39"><a href="#6-39" class="headerlink" title="6.39"></a>6.39</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶层const会被忽略，重复声明不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值类型不影响重载，报错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">reset</span><span class="params">(<span class="keyword">int</span> *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> *<span class="title">reset</span><span class="params">(<span class="keyword">double</span> *)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="6-40"><a href="#6-40" class="headerlink" title="6.40"></a>6.40</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ff</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">0</span>, <span class="keyword">int</span> c = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">init</span><span class="params">(<span class="keyword">int</span> ht = <span class="number">24</span>,<span class="keyword">int</span> wd, <span class="keyword">char</span> bckgrnd)</span></span>;<span class="comment">// wd, bckgrnd都需要初始化</span></span><br></pre></td></tr></table></figure><h3 id="6-41"><a href="#6-41" class="headerlink" title="6.41"></a>6.41</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">init</span><span class="params">(<span class="keyword">int</span> ht, <span class="keyword">int</span> wd = <span class="number">80</span>, <span class="keyword">char</span> bckgrnd = <span class="string">' '</span>)</span></span>;</span><br><span class="line">init();<span class="comment">// 错误</span></span><br><span class="line">init(<span class="number">24</span>,<span class="number">10</span>);<span class="comment">// 正确</span></span><br><span class="line">init(<span class="number">14</span>,<span class="string">'*'</span>);<span class="comment">// 对，但是 wd 会变成 * 的 ASCII 值</span></span><br></pre></td></tr></table></figure><h3 id="6-42"><a href="#6-42" class="headerlink" title="6.42"></a>6.42</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">make_plural</span><span class="params">(<span class="keyword">size_t</span> ctr, <span class="keyword">const</span> <span class="built_in">string</span> &amp;word, <span class="keyword">const</span> <span class="built_in">string</span> &amp;ending = <span class="string">"s"</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (ctr &gt; <span class="number">1</span>) ? word + ending : word;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"singual: "</span> &lt;&lt; make_plural(<span class="number">1</span>, <span class="string">"success"</span>, <span class="string">"es"</span>) &lt;&lt; <span class="string">" "</span></span><br><span class="line">         &lt;&lt; make_plural(<span class="number">1</span>, <span class="string">"failure"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"plural : "</span> &lt;&lt; make_plural(<span class="number">2</span>, <span class="string">"success"</span>, <span class="string">"es"</span>) &lt;&lt; <span class="string">" "</span></span><br><span class="line">         &lt;&lt; make_plural(<span class="number">2</span>, <span class="string">"failure"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-43"><a href="#6-43" class="headerlink" title="6.43"></a>6.43</h3><p>Both two should put in a header. (a) is an inline function. (b) is the declaration of useful function. we always put them in the header.</p><h3 id="6-44"><a href="#6-44" class="headerlink" title="6.44"></a>6.44</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_shorter</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;lft, <span class="keyword">const</span> <span class="built_in">string</span> &amp;rht)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lft.size() &lt; rht.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-45"><a href="#6-45" class="headerlink" title="6.45"></a>6.45</h3><p>For example, the function <code>arrPtr</code> in Exercise 6.38 and <code>make_plural</code> in Exercise 6.42 should be defined as <code>inline</code>. But the function <code>func</code> in Exercise 6.4 shouldn’t. It is not that small and it’s only being called once. Hence, it will probably not expand as inline.</p><h3 id="6-46-Two-explanations"><a href="#6-46-Two-explanations" class="headerlink" title="6.46 (Two explanations)"></a>6.46 (Two explanations)</h3><p>No. Because <code>std::string::size()</code> is not a <code>constexpr</code> function and <code>s1.size() == s2.size()</code> is not a constant expression.</p><blockquote><p><strong>For a</strong> non-template, non-defaulted <strong>constexpr function</strong> or a non-template, non-defaulted, non-inheriting constexpr constructor, <strong>if no argument values exist such that an invocation of the function or constructor could be an evaluated subexpression of a core constant expression (5.19), the program is ill-formed;</strong> no diagnostic required. (N3690 §7.1.5 [dcl.constexpr]/5)</p></blockquote><p>显然 <code>isShorter</code> 函数不符合 <code>constexpr</code> 函数的要求，它虽然只有一条 <code>return</code> 语句，但是返回的结果调用了标准库 <code>string</code> 类的 <code>size()</code> 函数和 <code>&lt;</code> 比较符，无法构成常量表达式，因此不能改写成 <code>constexpr</code> 函数。</p><blockquote><p>constexpr 函数是指能用于常量表达式的函数，constexpr函数的返回类型和所有形参的类型都得是字面值类型，而且函数体中必须有且只有一条 return语句。</p></blockquote><h3 id="6-47"><a href="#6-47" class="headerlink" title="6.47"></a>6.47</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVec</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"vector size: "</span> &lt;&lt; vec.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (!vec.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = vec.back();</span><br><span class="line">        vec.pop_back();</span><br><span class="line">        printVec(vec);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; tmp &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    printVec(vec);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-48"><a href="#6-48" class="headerlink" title="6.48"></a>6.48</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; s != sought)&#123;&#125;</span><br><span class="line">assert(s == sought);<span class="comment">// 从输入开始, cin 里一直都是有值的, 所以没啥意义</span></span><br></pre></td></tr></table></figure><h3 id="6-49"><a href="#6-49" class="headerlink" title="6.49"></a>6.49</h3><p>candidate function:</p><blockquote><p>Set of functions that are considered when resolving a function call. (all the functions with the name used in the call for which a declaration is in scope at the time of the call.)</p></blockquote><p>viable function:</p><blockquote><p>Subset of the candidate functions that could match a given call. It have the same number of parameters as arguments to the call, and each argument type can be converted to the corresponding parameter type.</p></blockquote><h3 id="6-50"><a href="#6-50" class="headerlink" title="6.50"></a>6.50</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">2.56</span>, <span class="number">42</span>);<span class="comment">// illegal. 2.56 match the double, but 42 match the int.</span></span><br><span class="line">f(<span class="number">42</span>);<span class="comment">// match void f(int).</span></span><br><span class="line">f(<span class="number">42</span>, <span class="number">0</span>);<span class="comment">// match void f(int, int).</span></span><br><span class="line">f(<span class="number">2.56</span>, <span class="number">3.14</span>);<span class="comment">// match void f(double, double = 3.14).</span></span><br></pre></td></tr></table></figure><h3 id="6-51"><a href="#6-51" class="headerlink" title="6.51"></a>6.51</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"f()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"f(int)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"f(int, int)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span>, <span class="keyword">double</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"f(double, double)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//f(2.56, 42); // error: 'f' is ambiguous.</span></span><br><span class="line">    f(<span class="number">42</span>);</span><br><span class="line">    f(<span class="number">42</span>, <span class="number">0</span>);</span><br><span class="line">    f(<span class="number">2.56</span>, <span class="number">3.14</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-52"><a href="#6-52" class="headerlink" title="6.52"></a>6.52</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manip</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">manip(<span class="string">'a'</span>, <span class="string">'z'</span>);<span class="comment">// Match through a promotion</span></span><br><span class="line">manip(<span class="number">55.4</span>, dobj);<span class="comment">// Arithmetic type conversion</span></span><br></pre></td></tr></table></figure><h3 id="6-53"><a href="#6-53" class="headerlink" title="6.53"></a>6.53</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span>&amp;, <span class="keyword">int</span>&amp;)</span></span>;<span class="comment">// calls lookup(int&amp;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp;, <span class="keyword">const</span> <span class="keyword">int</span>&amp;)</span></span>;<span class="comment">// calls lookup(const int&amp;)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">char</span>*, <span class="keyword">char</span>*)</span></span>;<span class="comment">// calls lookup(char*)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;<span class="comment">// calls lookup(const char*)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">char</span>*, <span class="keyword">char</span>*)</span></span>;<span class="comment">// illegal. both calls lookup(char*)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">char</span>* <span class="keyword">const</span>, <span class="keyword">char</span>* <span class="keyword">const</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="6-54"><a href="#6-54" class="headerlink" title="6.54"></a>6.54</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> pFunc1 = <span class="keyword">decltype</span>(func) *;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">decltype</span><span class="params">(func)</span> *pFunc2</span>;</span><br><span class="line"><span class="keyword">using</span> pFunc3 = <span class="keyword">int</span> (*)(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</span><br><span class="line"><span class="keyword">using</span> pFunc4 = <span class="keyword">int</span>(<span class="keyword">int</span> a, <span class="keyword">int</span> b);</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*pFunc5)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="keyword">using</span> pFunc6 = <span class="keyword">decltype</span>(func);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pFunc1&gt; vec1;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pFunc2&gt; vec2;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pFunc3&gt; vec3;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pFunc4*&gt; vec4;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pFunc5&gt; vec5;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pFunc6*&gt; vec6;</span><br></pre></td></tr></table></figure><h3 id="6-55"><a href="#6-55" class="headerlink" title="6.55"></a>6.55</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subtract</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">multiply</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a * b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> b != <span class="number">0</span> ? a / b : <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h3 id="6-56"><a href="#6-56" class="headerlink" title="6.56"></a>6.56</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">decltype</span>(func) *&gt; vec&#123; add, subtract, multiply, divide &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : vec)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; f(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data total;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cin</span> &gt;&gt; total.bookNo &gt;&gt; total.units_sold &gt;&gt; total.revenue)</span><br><span class="line">    &#123;</span><br><span class="line">        Sales_data trans;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; trans.bookNo &gt;&gt; trans.units_sold &gt;&gt; trans.revenue) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (total.bookNo == trans.bookNo) </span><br><span class="line">            &#123;</span><br><span class="line">                total.units_sold += trans.units_sold;</span><br><span class="line">                total.revenue += trans.revenue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; total.bookNo &lt;&lt; <span class="string">" "</span> &lt;&lt; total.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; total.revenue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; total.bookNo &lt;&lt; <span class="string">" "</span> &lt;&lt; total.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; total.revenue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> bookNo;&#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sales_data&amp; Sales_data::combine(<span class="keyword">const</span> Sales_data &amp;rhs)&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3"><a href="#7-3" class="headerlink" title="7.3"></a>7.3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data total;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cin</span> &gt;&gt; total.bookNo &gt;&gt; total.units_sold &gt;&gt; total.revenue)</span><br><span class="line">    &#123;</span><br><span class="line">        Sales_data trans;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; trans.bookNo &gt;&gt; trans.units_sold &gt;&gt; trans.revenue) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (total.isbn() == trans.isbn()) </span><br><span class="line">            &#123;</span><br><span class="line">                total.combine(trans);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; total.bookNo &lt;&lt; <span class="string">" "</span> &lt;&lt; total.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; total.revenue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; total.bookNo &lt;&lt; <span class="string">" "</span> &lt;&lt; total.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; total.revenue &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4"><a href="#7-4" class="headerlink" title="7.4"></a>7.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-5"><a href="#7-5" class="headerlink" title="7.5"></a>7.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getAddress</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> address;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-6"><a href="#7-6" class="headerlink" title="7.6"></a>7.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="keyword">const</span>&amp; <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// member functions.</span></span><br><span class="line">Sales_data&amp; Sales_data::combine(<span class="keyword">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nonmember functions</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; item.isbn() &lt;&lt; <span class="string">" "</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; item.revenue;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.combine(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7"><a href="#7-7" class="headerlink" title="7.7"></a>7.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data total;</span><br><span class="line">    <span class="keyword">if</span> (read(<span class="built_in">std</span>::<span class="built_in">cin</span>, total))</span><br><span class="line">    &#123;</span><br><span class="line">        Sales_data trans;</span><br><span class="line">        <span class="keyword">while</span> (read(<span class="built_in">std</span>::<span class="built_in">cin</span>, trans)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (total.isbn() == trans.isbn())</span><br><span class="line">                total.combine(trans);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                print(<span class="built_in">std</span>::<span class="built_in">cout</span>, total) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="built_in">std</span>::<span class="built_in">cout</span>, total) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-8"><a href="#7-8" class="headerlink" title="7.8"></a>7.8</h3><p>Define <code>read</code>‘s Sales_data parameter as plain reference since it’s intended to change the <code>revenue</code>‘s value.</p><p>Define <code>print</code>‘s Sales_data parameter as a reference to const since it isn’t intended to change any member’s value of this object.</p><h3 id="7-9"><a href="#7-9" class="headerlink" title="7.9"></a>7.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getAddress</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> address;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream&amp; is, Person&amp; a)</span></span>&#123;</span><br><span class="line">    is &gt;&gt; a.name &gt;&gt; a.address;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, Person&amp; a)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; a.name &lt;&lt; <span class="string">" "</span> &lt;&lt; a.address;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-10"><a href="#7-10" class="headerlink" title="7.10"></a>7.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(read(read(<span class="built_in">cin</span>, data1), data2))</span><br></pre></td></tr></table></figure><p>we can try to divide it like that:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::istream &amp;firstStep = read(<span class="built_in">cin</span>, data1);</span><br><span class="line">sdt::istream &amp;secondStep = read(firstStep, data2);</span><br><span class="line"><span class="keyword">if</span> (secondStep)</span><br></pre></td></tr></table></figure><p>the condition of the <code>if</code> statement would read two Sales_data object at one time.</p><h3 id="7-11"><a href="#7-11" class="headerlink" title="7.11"></a>7.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ex7_11.h</span></span><br><span class="line"><span class="comment">//  Exercise 7.11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CP5_ex7_11_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CP5_ex7_11_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">    Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s):bookNo(s) &#123; &#125;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):bookNo(s), units_sold(n), revenue(n*p)&#123; &#125;</span><br><span class="line">    Sales_data(<span class="built_in">std</span>::istream &amp;is);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nonmember functions</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; item.isbn() &lt;&lt; <span class="string">" "</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; item.revenue;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.combine(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// member functions.</span></span><br><span class="line">Sales_data::Sales_data(<span class="built_in">std</span>::istream &amp;is)</span><br><span class="line">&#123;</span><br><span class="line">    read(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data&amp; Sales_data::combine(<span class="keyword">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  ex7_11.cpp</span></span><br><span class="line"><span class="comment">//  Exercise 7.11</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ex7_11.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data item1;</span><br><span class="line">    print(<span class="built_in">std</span>::<span class="built_in">cout</span>, item1) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function">Sales_data <span class="title">item2</span><span class="params">(<span class="string">"0-201-78345-X"</span>)</span></span>;</span><br><span class="line">    print(<span class="built_in">std</span>::<span class="built_in">cout</span>, item2) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function">Sales_data <span class="title">item3</span><span class="params">(<span class="string">"0-201-78345-X"</span>, <span class="number">3</span>, <span class="number">20.00</span>)</span></span>;</span><br><span class="line">    print(<span class="built_in">std</span>::<span class="built_in">cout</span>, item3) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function">Sales_data <span class="title">item4</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">cin</span>)</span></span>;</span><br><span class="line">    print(<span class="built_in">std</span>::<span class="built_in">cout</span>, item4) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-12"><a href="#7-12" class="headerlink" title="7.12"></a>7.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span>;</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream&amp;, Sales_data&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">    Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s):bookNo(s) &#123; &#125;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):bookNo(s), units_sold(n), revenue(n*p)&#123; &#125;</span><br><span class="line">    Sales_data(<span class="built_in">std</span>::istream &amp;is) &#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// member functions.</span></span><br><span class="line">Sales_data&amp; Sales_data::combine(<span class="keyword">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nonmember functions</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-13"><a href="#7-13" class="headerlink" title="7.13"></a>7.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ex7_12.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Sales_data <span class="title">total</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">cin</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!total.isbn().empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::istream &amp;is = <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line">        <span class="keyword">while</span> (is) &#123;</span><br><span class="line">            <span class="function">Sales_data <span class="title">trans</span><span class="params">(is)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (!is) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (total.isbn() == trans.isbn())</span><br><span class="line">                total.combine(trans);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                print(<span class="built_in">std</span>::<span class="built_in">cout</span>, total) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="built_in">std</span>::<span class="built_in">cout</span>, total) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-14"><a href="#7-14" class="headerlink" title="7.14"></a>7.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sales_data() : bookNo(<span class="string">""</span>), units_sold(<span class="number">0</span>) , revenue(<span class="number">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="7-15"><a href="#7-15" class="headerlink" title="7.15"></a>7.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person() = <span class="keyword">default</span>;</span><br><span class="line">    Person(<span class="keyword">const</span> <span class="built_in">string</span> s1,<span class="keyword">const</span> <span class="built_in">string</span> s2) : name(s1), address(s2)&#123;&#125;</span><br><span class="line">    Person(istream&amp; is)&#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getAddress</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> address;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream&amp; is, Person&amp; a)</span></span>&#123;</span><br><span class="line">    is &gt;&gt; a.name &gt;&gt; a.address;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, Person&amp; a)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; a.name &lt;&lt; <span class="string">" "</span> &lt;&lt; a.address;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-16"><a href="#7-16" class="headerlink" title="7.16"></a>7.16</h3><p>没有限制 &amp; 指定的访问级别将直到下一个访问控制符亦或结束 &amp; 所有可以被访问的部分都应该在 <code>public</code> 说明符之后 &amp; 所有不能被类外访问但可被类内访问的应在 <code>private</code> 之后</p><h3 id="7-17"><a href="#7-17" class="headerlink" title="7.17"></a>7.17</h3><p>有，默认访问控制不同， <code>class</code> 是 <code>private</code> ， <code>struct</code> 是 <code>public</code></p><h3 id="7-18"><a href="#7-18" class="headerlink" title="7.18"></a>7.18</h3><p>encapsulation is the separation of implementation from interface. It hides the implementation details of a type. (In C++, encapsulation is enforced by putting the implementation in the private part of a class)</p><hr><p>Important advantages:</p><ul><li>User code cannot inadvertently corrupt the state of an encapsulation object.</li><li>The implementation of an encapsulated class can change over time without requiring changes in user-level code.</li></ul><h3 id="7-19"><a href="#7-19" class="headerlink" title="7.19"></a>7.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person() = <span class="keyword">default</span>;</span><br><span class="line">    Person(<span class="keyword">const</span> <span class="built_in">string</span> s1,<span class="keyword">const</span> <span class="built_in">string</span> s2) : name(s1), address(s2)&#123;&#125;</span><br><span class="line">    Person(istream&amp; is)&#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getAddress</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> address;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream&amp; is, Person&amp; a)</span></span>&#123;</span><br><span class="line">    is &gt;&gt; a.name &gt;&gt; a.address;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, Person&amp; a)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; a.name &lt;&lt; <span class="string">" "</span> &lt;&lt; a.address;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// the interface should be defined as public, the data shouldn't expose to outside of the class.</span></span><br></pre></td></tr></table></figure><h3 id="7-20"><a href="#7-20" class="headerlink" title="7.20"></a>7.20</h3><p><code>friend</code> is a mechanism by which a class grants access to its nonpublic members. They have the same rights as members.</p><p><strong>Pros</strong>:</p><ul><li>the useful functions can refer to class members in the class scope without needing to explicitly prefix them with the class name.</li><li>you can access all the nonpublic members conveniently.</li><li>sometimes, more readable to the users of class.</li></ul><p><strong>Cons</strong>:</p><ul><li>lessens encapsulation and therefore maintainability.</li><li>code verbosity, declarations inside the class, outside the class.</li></ul><h3 id="7-21"><a href="#7-21" class="headerlink" title="7.21"></a>7.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s):bookNo(s) &#123; &#125;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):bookNo(s), units_sold(n), revenue(n*p)&#123; &#125;</span><br><span class="line">    Sales_data(<span class="built_in">std</span>::istream &amp;is) &#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// member functions.</span></span><br><span class="line">Sales_data&amp; Sales_data::combine(<span class="keyword">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nonmember functions</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; item.isbn() &lt;&lt; <span class="string">" "</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; item.revenue;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.combine(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-22"><a href="#7-22" class="headerlink" title="7.22"></a>7.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> istream&amp; <span class="title">read</span><span class="params">(istream&amp; is, Person&amp; a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, Person&amp; a)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person() = <span class="keyword">default</span>;</span><br><span class="line">    Person(<span class="keyword">const</span> <span class="built_in">string</span> s1,<span class="keyword">const</span> <span class="built_in">string</span> s2) : name(s1), address(s2)&#123;&#125;</span><br><span class="line">    Person(istream&amp; is)&#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">getAddress</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> address;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">istream&amp; <span class="title">read</span><span class="params">(istream&amp; is, Person&amp; a)</span></span>&#123;</span><br><span class="line">    is &gt;&gt; a.name &gt;&gt; a.address;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ostream&amp; <span class="title">print</span><span class="params">(ostream&amp; os, Person&amp; a)</span></span>&#123;</span><br><span class="line">    os &lt;&lt; a.name &lt;&lt; <span class="string">" "</span> &lt;&lt; a.address;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-23-amp-7-24"><a href="#7-23-amp-7-24" class="headerlink" title="7.23 &amp; 7.24"></a>7.23 &amp; 7.24</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> pos = <span class="built_in">string</span>::size_type;</span><br><span class="line">    Screen() = defualt;</span><br><span class="line">    Screen(pos ht, pos wd) : height(ht), width(wd), contents(ht * wd, <span class="string">' '</span>) &#123;&#125;</span><br><span class="line">    Screen(pos ht, pos wd, <span class="keyword">char</span> c) : height(ht), width(wd), contents(ht * wd, c) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> contents[cur]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">(pos r, pos c)</span> </span>&#123; <span class="keyword">return</span> contents[r * width + c]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cur = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-25"><a href="#7-25" class="headerlink" title="7.25"></a>7.25</h3><p>The class below can rely on it. It goes in <em>Section 7.1.5</em>:</p><blockquote><p>the synthesized versions are unlikely to work correctly for classes that allocate resources that reside outside the class objects themselves.</p><p>Moreover, the synthesized versions for copy, assignment, and destruction work correctly for classes that have <strong>vector or string members</strong>.</p></blockquote><p>Hence the class below which used only built-in type and strings can rely on the default version of copy and assignment.</p><h3 id="7-26"><a href="#7-26" class="headerlink" title="7.26"></a>7.26</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sales_data() = <span class="keyword">default</span>;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s) : bookNo(s) &#123;&#125;</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p) : bookNo(s), units_sold(n), revenue(n * p) &#123;&#125;</span><br><span class="line">    Sales_data(<span class="built_in">std</span>::istream &amp;is) &#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;;</span><br><span class="line">    <span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// member functions.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> units_sold ? revenue / units_sold : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sales_data &amp;Sales_data::combine(<span class="keyword">const</span> Sales_data &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nonmember functions</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; item.isbn() &lt;&lt; <span class="string">" "</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; item.revenue;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.combine(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-27"><a href="#7-27" class="headerlink" title="7.27"></a>7.27</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> pos = <span class="built_in">string</span>::size_type;</span><br><span class="line">    Screen() = defualt;</span><br><span class="line">    Screen(pos ht, pos wd) : height(ht), width(wd), contents(ht * wd, <span class="string">' '</span>) &#123;&#125;</span><br><span class="line">    Screen(pos ht, pos wd, <span class="keyword">char</span> c) : height(ht), width(wd), contents(ht * wd, c) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> contents[cur]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">(pos r, pos c)</span> </span>&#123; <span class="keyword">return</span> contents[r * width + c]; &#125;</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">move</span><span class="params">(pos l, pos r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cur = l * width + r;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">set</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        contents[cur] = c;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">set</span><span class="params">(pos l, pos r, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        contents[l * width + r] = c;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">display</span><span class="params">(ostream &amp;os)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        do_display(os);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Screen &amp;<span class="title">display</span><span class="params">(ostream &amp;os)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        do_display(os);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> do_display <span class="title">const</span><span class="params">(ostream &amp;os)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        os &lt;&lt; contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cur = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> contents;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-28"><a href="#7-28" class="headerlink" title="7.28"></a>7.28</h3><p>The second call to <code>display</code> couldn’t print <code>#</code> among the output, cause the call to <code>set</code> would change the <strong>temporary copy</strong>, not myScreen.</p><h3 id="7-29"><a href="#7-29" class="headerlink" title="7.29"></a>7.29</h3><p>Yes</p><h3 id="7-30"><a href="#7-30" class="headerlink" title="7.30"></a>7.30</h3><p><strong>Pros</strong></p><ul><li>more explicit</li><li>less scope for misreading</li><li><p>can use the member function parameter which name is same as the member name.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;addr)</span> </span>&#123; <span class="keyword">this</span>-&gt;addr = addr; &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Cons</strong></p><ul><li>more to read</li><li><p>sometimes redundant</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getAddr</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;addr; &#125; <span class="comment">// unnecessary</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="7-31"><a href="#7-31" class="headerlink" title="7.31"></a>7.31</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line">    Y* y = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> &#123;</span></span><br><span class="line">    X x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-32"><a href="#7-32" class="headerlink" title="7.32"></a>7.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window_mgr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> ScreenIndex = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Screen&gt;::size_type;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(ScreenIndex)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Screen&gt; screens;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> &#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> Window_mgr::clear(ScreenIndex);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> pos = <span class="built_in">std</span>::<span class="built_in">string</span>::size_type;</span><br><span class="line"></span><br><span class="line">    Screen() = <span class="keyword">default</span>;</span><br><span class="line">    Screen(pos ht, pos wd):height(ht), width(wd), contents(ht*wd, <span class="string">' '</span>)&#123; &#125;</span><br><span class="line">    Screen(pos ht, pos wd, <span class="keyword">char</span> c):height(ht), width(wd), contents(ht*wd, c)&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> contents[cursor]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">char</span> <span class="title">get</span><span class="params">(pos r, pos c)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> contents[r*width+c]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">move</span><span class="params">(pos r, pos c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">set</span><span class="params">(<span class="keyword">char</span> c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Screen&amp; <span class="title">set</span><span class="params">(pos r, pos c, <span class="keyword">char</span> ch)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> Screen&amp; <span class="title">display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os)</span> <span class="keyword">const</span> </span>&#123; do_display(os); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="function">Screen&amp; <span class="title">display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os)</span> </span>&#123; do_display(os); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">do_display</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os)</span> <span class="keyword">const</span> </span>&#123; os &lt;&lt; contents; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pos cursor = <span class="number">0</span>;</span><br><span class="line">    pos height = <span class="number">0</span>, width = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> contents;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> Window_mgr::clear(ScreenIndex i)</span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">if</span> (i &gt;= screens.size()) <span class="keyword">return</span>;    <span class="comment">// judge for out_of_range.</span></span><br><span class="line">    Screen &amp;s = screens[i];</span><br><span class="line">    s.contents = <span class="built_in">std</span>::<span class="built_in">string</span>(s.height * s.width, <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Screen&amp; Screen::move(pos r, pos c)</span><br><span class="line">&#123;</span><br><span class="line">    cursor = r*width + c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Screen&amp; Screen::<span class="built_in">set</span>(<span class="keyword">char</span> c)</span><br><span class="line">&#123;</span><br><span class="line">    contents[cursor] = c;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Screen&amp; Screen::<span class="built_in">set</span>(pos r, pos c, <span class="keyword">char</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">    contents[r*width+c] = ch;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-33"><a href="#7-33" class="headerlink" title="7.33"></a>7.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Screen::pos Screen::size() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> height * width;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-34"><a href="#7-34" class="headerlink" title="7.34"></a>7.34</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\WorkSpace\C++\A.cpp:<span class="number">8</span>:<span class="number">20</span>: 错误：‘pos’未声明</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">dummy_fcn</span><span class="params">(pos height)</span></span></span><br><span class="line">                    ^~~</span><br></pre></td></tr></table></figure><h3 id="7-35"><a href="#7-35" class="headerlink" title="7.35"></a>7.35</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">string</span> Type;</span><br><span class="line"><span class="function">Type <span class="title">initVal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exercise</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">double</span> Type;</span><br><span class="line">    <span class="function">Type <span class="title">setVal</span><span class="params">(Type)</span></span>;</span><br><span class="line">    <span class="function">Type <span class="title">initVal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line">Exercise::Type Exercise::initVal()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Exercise::Type Exercise::setVal(Type a)</span><br><span class="line">&#123;</span><br><span class="line">    val += a + initVal();</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-36"><a href="#7-36" class="headerlink" title="7.36"></a>7.36</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span>&#123;</span></span><br><span class="line">    X(<span class="keyword">int</span> i, <span class="keyword">int</span> j): base(i), rem(i % j)&#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> rem, base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-37"><a href="#7-37" class="headerlink" title="7.37"></a>7.37</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Sales_data <span class="title">first_item</span><span class="params">(<span class="built_in">cin</span>)</span></span>;   <span class="comment">// use Sales_data(std::istream &amp;is) ; its value are up to your input.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Sales_data next;  <span class="comment">// use Sales_data(std::string s = ""); bookNo = "", cnt = 0, revenue = 0.0</span></span><br><span class="line">  <span class="function">Sales_data <span class="title">last</span><span class="params">(<span class="string">"9-999-99999-9"</span>)</span></span>; <span class="comment">// use Sales_data(std::string s = ""); bookNo = "9-999-99999-9", cnt = 0, revenue = 0.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-38"><a href="#7-38" class="headerlink" title="7.38"></a>7.38</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sale_data(istream&amp; is = <span class="built_in">std</span>::<span class="built_in">cin</span>)&#123;read(is,*<span class="keyword">this</span>);&#125;</span><br></pre></td></tr></table></figure><h3 id="7-39"><a href="#7-39" class="headerlink" title="7.39"></a>7.39</h3><p>illegal. cause the call of overloaded ‘Sales_data()’ is <strong>ambiguous</strong>.</p><h3 id="7-40"><a href="#7-40" class="headerlink" title="7.40"></a>7.40</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Book(<span class="keyword">unsigned</span> isbn, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; name, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; author, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; pubdate)</span><br><span class="line">        :isbn_(isbn), name_(name), author_(author), pubdate_(pubdate)</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Book</span><span class="params">(<span class="built_in">std</span>::istream &amp;in)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        in &gt;&gt; isbn_ &gt;&gt; name_ &gt;&gt; author_ &gt;&gt; pubdate_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> isbn_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> author_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> pubdate_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-41"><a href="#7-41" class="headerlink" title="7.41"></a>7.41</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ex7_41.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CP5_ex7_41_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CP5_ex7_41_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s, <span class="keyword">unsigned</span> n, <span class="keyword">double</span> p):bookNo(s), units_sold(n), revenue(n*p)</span><br><span class="line">    &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Sales_data(const std::string&amp;, unsigned, double)"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line">  </span><br><span class="line">    Sales_data() : Sales_data(<span class="string">""</span>, <span class="number">0</span>, <span class="number">0.0f</span>)</span><br><span class="line">    &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Sales_data()"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line">  </span><br><span class="line">    Sales_data(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s) : Sales_data(s, <span class="number">0</span>, <span class="number">0.0f</span>)</span><br><span class="line">    &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Sales_data(const std::string&amp;)"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line">  </span><br><span class="line">    Sales_data(<span class="built_in">std</span>::istream &amp;is);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">isbn</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> bookNo; &#125;</span><br><span class="line">    <span class="function">Sales_data&amp; <span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span></span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">avg_price</span><span class="params">()</span> <span class="keyword">const</span></span>;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> revenue = <span class="number">0.0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line"><span class="keyword">double</span> Sales_data::avg_price() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> units_sold ? revenue/units_sold : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declarations for nonmember parts of the Sales_data interface.</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span>;</span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ex7_41.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ex7_41.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor</span></span><br><span class="line">Sales_data::Sales_data(<span class="built_in">std</span>::istream &amp;is) : Sales_data()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Sales_data(istream &amp;is)"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    read(is, *<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// member functions.</span></span><br><span class="line">Sales_data&amp; Sales_data::combine(<span class="keyword">const</span> Sales_data&amp; rhs)</span><br><span class="line">&#123;</span><br><span class="line">    units_sold += rhs.units_sold;</span><br><span class="line">    revenue += rhs.revenue;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// friend functions</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price = <span class="number">0</span>;</span><br><span class="line">    is &gt;&gt; item.bookNo &gt;&gt; item.units_sold &gt;&gt; price;</span><br><span class="line">    item.revenue = price * item.units_sold;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Sales_data &amp;item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; item.isbn() &lt;&lt; <span class="string">" "</span> &lt;&lt; item.units_sold &lt;&lt; <span class="string">" "</span> &lt;&lt; item.revenue;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sales_data <span class="title">add</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data sum = lhs;</span><br><span class="line">    sum.combine(rhs);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-42"><a href="#7-42" class="headerlink" title="7.42"></a>7.42</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Book(<span class="keyword">unsigned</span> isbn, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; name, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; author, <span class="built_in">std</span>::<span class="built_in">string</span> <span class="keyword">const</span>&amp; pubdate)</span><br><span class="line">        :isbn_(isbn), name_(name), author_(author), pubdate_(pubdate)</span><br><span class="line">    &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Book</span><span class="params">(<span class="built_in">std</span>::istream &amp;in)</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        in &gt;&gt; isbn_ &gt;&gt; name_ &gt;&gt; author_ &gt;&gt; pubdate_;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> isbn_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> author_;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> pubdate_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-43"><a href="#7-43" class="headerlink" title="7.43"></a>7.43</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoDefault</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NoDefault(<span class="keyword">int</span> i) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C() : def(<span class="number">0</span>) &#123; &#125; <span class="comment">// define the constructor of C.</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    NoDefault def;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C c;   </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;C&gt; vec(<span class="number">10</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-44"><a href="#7-44" class="headerlink" title="7.44"></a>7.44</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;NoDefault&gt; vec(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// illegal, cause there are ten elements, each would be default initialized. But no default initializer for the temporary object.</span></span><br></pre></td></tr></table></figure><h3 id="7-45"><a href="#7-45" class="headerlink" title="7.45"></a>7.45</h3><p>No problem. cause <code>C</code> have the default constructor.</p><h3 id="7-46"><a href="#7-46" class="headerlink" title="7.46"></a>7.46</h3><ul><li>a) A class must provide at least one constructor. (<strong>untrue</strong>, “The compiler-generated constructor is known as the synthesized default constructor.”)</li><li>b) A default constructor is a constructor with an empty parameter list. (<strong>untrue</strong>, A default constructor is a constructor that is used if no initializer is supplied.What’s more, A constructor that supplies default arguments for all its parameters also defines the default constructor)</li><li>c) If there are no meaningful default values for a class, the class should not provide a default constructor. (<strong>untrue</strong>, the class should provide.)</li><li>d) If a class does not define a default constructor, the compiler generates one that initializes each data member to the default value of its associated type. (<strong>untrue</strong>, only if our class does not explicitly define <strong>any constructors</strong>, the compiler will implicitly define the default constructor for us.)</li></ul><h3 id="7-47"><a href="#7-47" class="headerlink" title="7.47"></a>7.47</h3><p>Whether the conversion of a <code>string</code> to <code>Sales_data</code> is desired <strong>depends on how we think our users will use the conversion</strong>. In this case, it might be okay. The <code>string</code> in null_book probably represents a nonexistent ISBN.</p><p>Benefits:</p><ul><li>prevent the use of a constructor in a context that requires an implicit conversion</li><li>we can define a constructor which is used only with the direct form of initialization</li></ul><p>Drawbacks:</p><ul><li>meaningful only on constructors that can be called with a single argument</li></ul><h3 id="7-48"><a href="#7-48" class="headerlink" title="7.48"></a>7.48</h3><p>Both are nothing happened.</p><h3 id="7-49"><a href="#7-49" class="headerlink" title="7.49"></a>7.49</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(a) <span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(Sales_data)</span></span>; <span class="comment">// ok</span></span><br><span class="line">(b) <span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(Sales_data&amp;)</span></span>; <span class="comment">// [Error] no matching function for call to 'Sales_data::combine(std::string&amp;)' (`std::string&amp;` can not convert to `Sales_data` type.)  </span></span><br><span class="line">(c) <span class="function">Sales_data &amp;<span class="title">combine</span><span class="params">(<span class="keyword">const</span> Sales_data&amp;)</span> <span class="keyword">const</span></span>; <span class="comment">// The trailing const mark can't be put here, as it forbids any mutation on data members. This conflicts with combine's semantics.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Some detailed explanation about problem (b) :It's wrong. Because combine’s parameter is a non-const reference , we can't pass a temporary to that parameter. If combine’s parameter is a reference to const , we can pass a temporary to that parameter. Like this :Sales_data &amp;combine(const Sales_data&amp;); Here we call the Sales_data combine member function with a string argument. This call is perfectly legal; the compiler automatically creates a Sales_data object from the given string. That newly generated (temporary) Sales_data is passed to combine.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="7-50"><a href="#7-50" class="headerlink" title="7.50"></a>7.50</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Person &amp;person)</span></span>;</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Person &amp;person)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person() = <span class="keyword">default</span>;</span><br><span class="line">    Person(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> sname, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> saddr):name(sname), address(saddr)&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Person</span><span class="params">(<span class="built_in">std</span>::istream &amp;is)</span></span>&#123; read(is, *<span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getAddress</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> address;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">istream &amp;<span class="title">read</span><span class="params">(<span class="built_in">std</span>::istream &amp;is, Person &amp;person)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    is &gt;&gt; person.name &gt;&gt; person.address;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ostream &amp;<span class="title">print</span><span class="params">(<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> Person &amp;person)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    os &lt;&lt; person.name &lt;&lt; <span class="string">" "</span> &lt;&lt; person.address;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-51"><a href="#7-51" class="headerlink" title="7.51"></a>7.51</h3><p>Such as a function like that:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>if vector has not defined its single-argument constructor as explicit. we can use the function like:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getSize(<span class="number">34</span>);</span><br></pre></td></tr></table></figure><p>What is this mean? It’s very confused.</p><p>But the <code>std::string</code> is different. In ordinary, we use <code>std::string</code> to replace <code>const char *</code>(the C language). so when we call a function like that:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setYourName</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>)</span></span>; <span class="comment">// declaration.</span></span><br><span class="line">setYourName(<span class="string">"pezy"</span>); <span class="comment">// just fine.</span></span><br></pre></td></tr></table></figure><p>it is very natural.</p><h3 id="7-52"><a href="#7-52" class="headerlink" title="7.52"></a>7.52</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sales_data</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> bookNo;</span><br><span class="line">    <span class="keyword">unsigned</span> units_sold;</span><br><span class="line">    <span class="keyword">double</span> revenue;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-53"><a href="#7-53" class="headerlink" title="7.53"></a>7.53</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    constexpr Debug(bool b = true) : rt(b), io(b), other(b) &#123; &#125;</span><br><span class="line">    constexpr Debug(bool r, bool i, bool o) : rt(r), io(i), other(o) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">constexpr</span> <span class="keyword">bool</span> <span class="title">any</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> rt || io || other; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_rt</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; rt = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_io</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; io = b; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_other</span><span class="params">(<span class="keyword">bool</span> b)</span> </span>&#123; other = b; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">bool</span> rt;        <span class="comment">// runtime error</span></span><br><span class="line">    <span class="keyword">bool</span> io;        <span class="comment">// I/O error</span></span><br><span class="line">    <span class="keyword">bool</span> other;     <span class="comment">// the others</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7-54"><a href="#7-54" class="headerlink" title="7.54"></a>7.54</h3><p>In C++11, constexpr member functions are implicitly const, so the “set_xx” functions, which will modify data members, cannot be declared as constexpr.</p><p>In C++14, this property no longer holds, so constexpr is suitable.</p><h3 id="7-55"><a href="#7-55" class="headerlink" title="7.55"></a>7.55</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no.</span></span><br><span class="line"><span class="comment">// std::string is not a literal type, and it can be verified by following codes:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ival;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::is_literal_type&lt;Data&gt;::value &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// output: false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-56"><a href="#7-56" class="headerlink" title="7.56"></a>7.56</h3><blockquote><p>What is a static class member?</p></blockquote><p>A class member that is <strong>associated with the class</strong>, rather than with individual objects of the class type.</p><blockquote><p>What are the advantages of static members?</p></blockquote><p>each object can no need to store a common data. And if the data is changed, each object can use the new value.</p><blockquote><p>How do they differ from ordinary members?</p></blockquote><ul><li>a static data member can have <strong>incomplete type</strong>.</li><li>we can use a static member <strong>as a default argument</strong>.</li></ul><h3 id="7-57"><a href="#7-57" class="headerlink" title="7.57"></a>7.57</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>&#123; amount += amount * interestRate; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">rate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> interestRate; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rate</span><span class="params">(<span class="keyword">double</span> newRate)</span> </span>&#123; interestRate = newRate; &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> owner;</span><br><span class="line">    <span class="keyword">double</span> amount;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> interestRate;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">double</span> todayRate = <span class="number">42.42</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">initRate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> todayRate; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Account::interestRate = initRate();</span><br></pre></td></tr></table></figure><h3 id="7-58"><a href="#7-58" class="headerlink" title="7.58"></a>7.58</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> rate = <span class="number">6.5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> vecSize = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec(vecSize);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"example.h"</span></span></span><br><span class="line"><span class="keyword">double</span> Example::rate;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; Example::vec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">D:\WorkSpace\C++\A.cpp:7:19: 错误：‘constexpr’ needed for in-class initialization of static data member ‘double Example::rate’ of non-integral type [-fpermissive]</span></span><br><span class="line"><span class="comment">     static double rate = 6.5;</span></span><br><span class="line"><span class="comment">                   ^~~</span></span><br><span class="line"><span class="comment">D:\WorkSpace\C++\A.cpp:9:31: 错误：‘vecSize’不是一个类型</span></span><br><span class="line"><span class="comment">     static vector&lt;double&gt; vec(vecSize);</span></span><br><span class="line"><span class="comment">                               ^~~</span></span><br><span class="line"><span class="comment">D:\WorkSpace\C++\A.cpp:13:25: 错误：‘std::vector&lt;double&gt; Example::vec’ is not a static data member of ‘class Example’</span></span><br><span class="line"><span class="comment"> vector&lt;double&gt; Example::vec;</span></span><br><span class="line"><span class="comment">                         ^~~</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// example.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">double</span> rate = <span class="number">6.5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> vecSize = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example.C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"example.h"</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">double</span> Example::rate;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; Example::vec(Example::vecSize);</span><br></pre></td></tr></table></figure><h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><h3 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">fun</span><span class="params">(istream&amp; is)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> buf;</span><br><span class="line">    <span class="keyword">while</span>(is &gt;&gt; buf)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    is.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2"><a href="#8-2" class="headerlink" title="8.2"></a>8.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">fun</span><span class="params">(istream&amp; is)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> buf;</span><br><span class="line">    <span class="keyword">while</span>(is &gt;&gt; buf)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    is.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    istream&amp; is = fun(<span class="built_in">cin</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; is.rdstate() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3"><a href="#8-3" class="headerlink" title="8.3"></a>8.3</h3><p>putting <code>cin</code> in an error state cause to terminate. such as <code>eofbit</code>, <code>failbit</code> and <code>badbit</code>.</p><h3 id="8-4"><a href="#8-4" class="headerlink" title="8.4"></a>8.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="built_in">string</span> fileName)</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">f1</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(f1)&#123;</span><br><span class="line">        <span class="built_in">string</span> a;</span><br><span class="line">        <span class="keyword">while</span>(getline(f1, a))&#123;</span><br><span class="line">            vec.push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"can not open the file : "</span> &lt;&lt; fileName &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-5"><a href="#8-5" class="headerlink" title="8.5"></a>8.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="built_in">string</span> fileName)</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">f1</span><span class="params">(fileName)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(f1)&#123;</span><br><span class="line">        <span class="built_in">string</span> a;</span><br><span class="line">        <span class="keyword">while</span>(f1 &gt;&gt; a)&#123;</span><br><span class="line">            vec.push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"can not open the file : "</span> &lt;&lt; fileName &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-6"><a href="#8-6" class="headerlink" title="8.6"></a>8.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../ch07/ex7_26.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ifstream; <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>; <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">    Sales_data total;</span><br><span class="line">    <span class="keyword">if</span> (read(input, total))</span><br><span class="line">    &#123;</span><br><span class="line">        Sales_data trans;</span><br><span class="line">        <span class="keyword">while</span> (read(input, trans))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (total.isbn() == trans.isbn())</span><br><span class="line">                total.combine(trans);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="built_in">cout</span>, total) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(<span class="built_in">cout</span>, total) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-7"><a href="#8-7" class="headerlink" title="8.7"></a>8.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../ch07/ex7_26.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::ifstream; <span class="keyword">using</span> <span class="built_in">std</span>::ofstream; <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cerr</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">input</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">    <span class="function">ofstream <span class="title">output</span><span class="params">(argv[<span class="number">2</span>])</span></span>;</span><br><span class="line">    Sales_data total;</span><br><span class="line">    <span class="keyword">if</span> (read(input, total))</span><br><span class="line">    &#123;</span><br><span class="line">        Sales_data trans;</span><br><span class="line">        <span class="keyword">while</span> (read(input, trans))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (total.isbn() == trans.isbn())</span><br><span class="line">                total.combine(trans);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                print(output, total) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                total = trans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(output, total) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data?!"</span> &lt;&lt; <span class="built_in">endl</span>;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-8"><a href="#8-8" class="headerlink" title="8.8"></a>8.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">output</span><span class="params">(argv[<span class="number">2</span>], ofstream::app)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="8-9"><a href="#8-9" class="headerlink" title="8.9"></a>8.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">istream&amp; <span class="title">fun</span><span class="params">(istream&amp; is)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> buf;</span><br><span class="line">    <span class="keyword">while</span>(is &gt;&gt; buf)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    is.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(<span class="string">"ATest"</span>)</span></span>;</span><br><span class="line">    fun(iss);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-10"><a href="#8-10" class="headerlink" title="8.10"></a>8.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> fname,line;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(fname)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(!ifs)&#123;</span><br><span class="line">    <span class="built_in">cerr</span> &lt;&lt; <span class="string">"No data"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(getline(ifs,line))</span><br><span class="line">    vec.push_back(line);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;s : vec)&#123;</span><br><span class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">while</span>(iss &gt;&gt; s)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-11"><a href="#8-11" class="headerlink" title="8.11"></a>8.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; phones;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> line, word;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PersonInfo&gt; people;</span><br><span class="line">    <span class="built_in">istringstream</span> record;</span><br><span class="line">    <span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line))</span><br><span class="line">    &#123;</span><br><span class="line">        PersonInfo info;</span><br><span class="line">        record.clear();</span><br><span class="line">        record.str(line);</span><br><span class="line">        record &gt;&gt; info.name;</span><br><span class="line">        <span class="keyword">while</span> (record &gt;&gt; word)</span><br><span class="line">            info.phones.push_back(word);</span><br><span class="line">        people.push_back(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : people)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; p.name &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;s : p.phones)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-12"><a href="#8-12" class="headerlink" title="8.12"></a>8.12</h3><p>Cause we need a aggregate class here. so it should have no in-class initializers.</p><h3 id="8-13"><a href="#8-13" class="headerlink" title="8.13"></a>8.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PersonInfo</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; phones;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isdigit</span>(str[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">format</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.substr(<span class="number">0</span>,<span class="number">3</span>) + <span class="string">"-"</span> + str.substr(<span class="number">3</span>,<span class="number">3</span>) + <span class="string">"-"</span> + str.substr(<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"../data/phonenumbers.txt"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!ifs)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"no phone numbers?"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> line, word;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PersonInfo&gt; people;</span><br><span class="line">    <span class="built_in">istringstream</span> record;</span><br><span class="line">    <span class="keyword">while</span> (getline(ifs, line))</span><br><span class="line">    &#123;</span><br><span class="line">        PersonInfo info;</span><br><span class="line">        record.clear();</span><br><span class="line">        record.str(line);</span><br><span class="line">        record &gt;&gt; info.name;</span><br><span class="line">        <span class="keyword">while</span> (record &gt;&gt; word)</span><br><span class="line">            info.phones.push_back(word);</span><br><span class="line">        people.push_back(info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;entry : people)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ostringstream</span> formatted, badNums;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;nums : entry.phones)</span><br><span class="line">            <span class="keyword">if</span> (!valid(nums)) badNums &lt;&lt; <span class="string">" "</span> &lt;&lt; nums;</span><br><span class="line">            <span class="keyword">else</span> formatted &lt;&lt; <span class="string">" "</span> &lt;&lt; format(nums);</span><br><span class="line">        <span class="keyword">if</span> (badNums.str().empty())</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; entry.name &lt;&lt; <span class="string">" "</span> &lt;&lt; formatted.str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"input error: "</span> &lt;&lt; entry.name</span><br><span class="line">                 &lt;&lt; <span class="string">" invalid number(s) "</span> &lt;&lt; badNums.str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-14"><a href="#8-14" class="headerlink" title="8.14"></a>8.14</h3><ul><li>cause they are all class type, not the built-in type. so <strong>reference</strong> more effective.</li><li>output shouldn’t change their values. so we added the <code>const</code>.</li></ul><h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><h3 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h3><p>list &amp; deque &amp; vector</p><h3 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&gt; Alist;</span><br></pre></td></tr></table></figure><h3 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a>9.3</h3><p>two iterators, <code>begin</code> and <code>end</code>:</p><ul><li>they refer to elements of the same container.</li><li>It is possible to reach <code>end</code> by repeatedly incrementing <code>begin</code>.</li></ul><h3 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator begin, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator end, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(; begin!=end; begin++)</span><br><span class="line">        <span class="keyword">if</span>(*begin == val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5"><a href="#9-5" class="headerlink" title="9.5"></a>9.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::<span class="function">iterator <span class="title">fun</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator begin, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator end, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(; begin!=end; begin++)</span><br><span class="line">        <span class="keyword">if</span>(*begin == val)</span><br><span class="line">            <span class="keyword">return</span> begin;</span><br><span class="line">    <span class="keyword">return</span> end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6"><a href="#9-6" class="headerlink" title="9.6"></a>9.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst1;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iter1 = lst1.begin(), iter2 = lst1.end();</span><br><span class="line"><span class="keyword">while</span>(iter1 != iter2);</span><br><span class="line"><span class="comment">//operator &lt; is not implemented in std::list, because std::list is essetially a doubly linked list. Addresses of nodes of linked list are not necessarily continuous.</span></span><br></pre></td></tr></table></figure><h3 id="9-7"><a href="#9-7" class="headerlink" title="9.7"></a>9.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type;</span><br></pre></td></tr></table></figure><h3 id="9-8"><a href="#9-8" class="headerlink" title="9.8"></a>9.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::const_iterator cit;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::iterator it;</span><br></pre></td></tr></table></figure><h3 id="9-9"><a href="#9-9" class="headerlink" title="9.9"></a>9.9</h3><p><code>cbegin</code> is a const member that returns the container’s <strong>const_iterator</strong> type.</p><p><code>begin</code> is nonconst and returns the container’s <strong>iterator</strong> type.</p><h3 id="9-10"><a href="#9-10" class="headerlink" title="9.10"></a>9.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line"><span class="keyword">auto</span> it1 = v1.begin();<span class="comment">// vector&lt;int&gt;::iterator</span></span><br><span class="line"><span class="keyword">auto</span> it2 = v2.begin(), it3 = v1.cbegin(), it4 = v2.cbegin();<span class="comment">// vector&lt;int&gt;::const_iterator</span></span><br></pre></td></tr></table></figure><h3 id="9-11"><a href="#9-11" class="headerlink" title="9.11"></a>9.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;    <span class="comment">// vec is empty</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>);    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>, <span class="number">1</span>);  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;; <span class="comment">// 1, 2, 3, 4, 5</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(other_vec); <span class="comment">// same as other_vec</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(other_vec.begin(), other_vec.end()); <span class="comment">// same as other_vec.begin to %.end</span></span><br></pre></td></tr></table></figure><h3 id="9-12"><a href="#9-12" class="headerlink" title="9.12"></a>9.12</h3><p>The constructor that takes another container as an argument (excepting array) assumes the container type and element type of both containers are identical. It will also copy all the elements of the received container into the new one:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; numbers2(numbers);        <span class="comment">// ok, numbers2 has the same elements as numbers</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers3(numbers);      <span class="comment">// error: no matching function for call...</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">double</span>&gt; numbers4(numbers);     <span class="comment">// error: no matching function for call...</span></span><br></pre></td></tr></table></figure><p>The constructor that takes two iterators as arguments does not require the container types to be identical. Moreover, the element types in the new and original containers can differ as long as it is possible to convert the elements we’re copying to the element type of the container we are initializing. It will also copy only the object delimited by the received iterators.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; numbers = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; numbers2(numbers.begin(), numbers.end);        <span class="comment">// ok, numbers2 has the same elements as numbers</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; numbers3(numbers.begin(), --numbers.end());  <span class="comment">// ok, numbers3 is &#123; 1, 2, 3, 4 &#125;</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">double</span>&gt; numbers4(++numbers.beg(), --numbers.end());        <span class="comment">// ok, numbers4 is &#123; 2, 3, 4 &#125;</span></span><br><span class="line">forward_list&lt;<span class="keyword">float</span>&gt; numbers5(numbers.begin(), numbers.end());   <span class="comment">// ok, number5 is &#123; 1, 2, 3, 4, 5 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="9-13"><a href="#9-13" class="headerlink" title="9.13"></a>9.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; a1(a.begin(), a.end());</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; b1(b.begin(), b.end());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-14"><a href="#9-14" class="headerlink" title="9.14"></a>9.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line">ll num[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">char</span> *&gt; a&#123;<span class="string">"Mooophy"</span>, <span class="string">"pezy"</span>, <span class="string">"Queeuqueg"</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; b;</span><br><span class="line">    b.assign(a.cbegin(), a.cend());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it : b)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-15"><a href="#9-15" class="headerlink" title="9.15"></a>9.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line"><span class="keyword">if</span>(a == b)</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br></pre></td></tr></table></figure><h3 id="9-16"><a href="#9-16" class="headerlink" title="9.16"></a>9.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;      li&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;    vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(li.begin(), li.end()) == vec ? <span class="string">"true"</span> : <span class="string">"false"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-17"><a href="#9-17" class="headerlink" title="9.17"></a>9.17</h3><p>必须有相同的容器和相同的类型，所持有的类型必须支持关系操作。</p><h3 id="9-18"><a href="#9-18" class="headerlink" title="9.18"></a>9.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; de;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">    de.push_back(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = de.cbegin(); it != de.cend(); it++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-19"><a href="#9-19" class="headerlink" title="9.19"></a>9.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; li;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">    li.push_back(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = li.cbegin(); it != li.cend(); it++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-20"><a href="#9-20" class="headerlink" title="9.20"></a>9.20</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; li&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; odd, even;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : li)</span><br><span class="line">    (i &amp; <span class="number">0x1</span> ? odd : even).push_back(i);</span><br></pre></td></tr></table></figure><h3 id="9-21"><a href="#9-21" class="headerlink" title="9.21"></a>9.21</h3><p>第一个 <code>insert</code> 调用接受刚读取的字符串，并将其放在 <code>iter</code> 所表示的元素的前面，<code>insert</code> 返回的值是指向这个新元素的迭代器。将该迭代器赋值给 <code>iter</code>，然后重复 <code>while</code> ，读取另一个单词。</p><p>只要有单词要插入，每次遍历 <code>while</code> 都会在 <code>iter</code> 前面插入一个新元素，并将新插入元素的位置重新赋值给 <code>iter</code> 即可。</p><h3 id="9-22"><a href="#9-22" class="headerlink" title="9.22"></a>9.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = iv.begin(), mid = iv.begin + iv.size()/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(iter != mid)<span class="comment">// 死循环</span></span><br><span class="line">    <span class="keyword">if</span>(*iter == some_val)</span><br><span class="line">        mid = iv.insert(iter, <span class="number">2</span> * some_val);<span class="comment">// 插入操作后，mid迭代器失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Fixed</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">double_and_insert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> some_val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> mid = [&amp;]&#123; <span class="keyword">return</span> v.begin() + v.size() / <span class="number">2</span>; &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> curr = v.begin(); curr != mid(); ++curr)</span><br><span class="line">        <span class="keyword">if</span> (*curr == some_val)</span><br><span class="line">            ++(curr = v.insert(curr, <span class="number">2</span> * some_val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123; <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line">    double_and_insert(v, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : v) </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-23"><a href="#9-23" class="headerlink" title="9.23"></a>9.23</h3><p>同一个元素</p><h3 id="9-24"><a href="#9-24" class="headerlink" title="9.24"></a>9.24</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">a.at(<span class="number">0</span>), a[<span class="number">0</span>], a.front(), a.end();</span><br><span class="line"><span class="comment">// terminating with uncaught exception of type std::out_of_range</span></span><br><span class="line"><span class="comment">// Segmentation fault: 11</span></span><br><span class="line"><span class="comment">// Segmentation fault: 11</span></span><br><span class="line"><span class="comment">// Segmentation fault: 11</span></span><br></pre></td></tr></table></figure><h3 id="9-25"><a href="#9-25" class="headerlink" title="9.25"></a>9.25</h3><p>不会发生什么事情 &amp; 从 <code>elem1</code> 删到最后 &amp; 同首</p><h3 id="9-26"><a href="#9-26" class="headerlink" title="9.26"></a>9.26</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ia[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">55</span>, <span class="number">89</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(ia, end(ia));</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; b(a.begin(), a.end());</span><br><span class="line"><span class="keyword">auto</span> it = b.begin();</span><br><span class="line"><span class="keyword">while</span>(it != b.end())</span><br><span class="line">    <span class="keyword">if</span>(*it &amp; <span class="number">0x1</span>)</span><br><span class="line">        it = b.erase(it);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        it++;</span><br><span class="line"><span class="keyword">auto</span> i = a.begin();</span><br><span class="line"><span class="keyword">while</span>(i != a.end())</span><br><span class="line">    <span class="keyword">if</span>(!(*it &amp; <span class="number">0x1</span>))</span><br><span class="line">        i = a.erase(it);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        i++;</span><br></pre></td></tr></table></figure><h3 id="9-27"><a href="#9-27" class="headerlink" title="9.27"></a>9.27</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">remove_odds</span><span class="params">(forward_list&lt;<span class="keyword">int</span>&gt;&amp; flist)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> is_odd = [] (<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> i &amp; <span class="number">0x1</span>; &#125;;</span><br><span class="line">    flist.remove_if(is_odd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    forward_list&lt;<span class="keyword">int</span>&gt; data &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    remove_odds(data);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : data) </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-28"><a href="#9-28" class="headerlink" title="9.28"></a>9.28</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">fun</span><span class="params">(forward_list&lt;<span class="built_in">string</span>&gt; &amp;lst, <span class="built_in">string</span> &amp;a, <span class="built_in">string</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> prev = lst.before_begin();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> curr = lst.begin(); curr != lst.end(); prev = curr++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*curr == to_find)</span><br><span class="line">        &#123;</span><br><span class="line">            lst.insert_after(curr, to_add);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    lst.insert_after(prev, to_add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-29"><a href="#9-29" class="headerlink" title="9.29"></a>9.29</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vec.resize(<span class="number">100</span>);    <span class="comment">// 在25个元素后增加75个0</span></span><br><span class="line">vec.resize(<span class="number">10</span>);     <span class="comment">// 只保留前10个元素</span></span><br></pre></td></tr></table></figure><h3 id="9-30"><a href="#9-30" class="headerlink" title="9.30"></a>9.30</h3><p>有默认的初始化或者相应的构造函数</p><h3 id="9-31"><a href="#9-31" class="headerlink" title="9.31"></a>9.31</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">remove_evens_and_double_odds</span><span class="params">(<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;&amp; data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> cur = data.begin(); cur != data.end();)</span><br><span class="line">        <span class="keyword">if</span> (*cur &amp; <span class="number">0x1</span>)</span><br><span class="line">            cur = data.insert(cur, *cur), advance(cur, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur = data.erase(cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; data &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    remove_evens_and_double_odds(data);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : data) <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forward_list</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">remove_evens_and_double_odds</span><span class="params">(forward_list&lt;<span class="keyword">int</span>&gt;&amp; data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> cur = data.begin(), prv = data.before_begin(); cur != data.end();)</span><br><span class="line">        <span class="keyword">if</span> (*cur &amp; <span class="number">0x1</span>)</span><br><span class="line">            cur = data.insert_after(prv, *cur),</span><br><span class="line">            advance(cur, <span class="number">2</span>),</span><br><span class="line">            advance(prv, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur = data.erase_after(prv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    forward_list&lt;<span class="keyword">int</span>&gt; data &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    remove_evens_and_double_odds(data);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : data)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-32"><a href="#9-32" class="headerlink" title="9.32"></a>9.32</h3><p>the statement is illegal, because as said in Standard [5.2.2] : “The order of evaluation of arguments is unspecified.” As a result, after entering function insert, iter could be its original value or original value + 1 or even anything else, depending on how compiler implemented.</p><h3 id="9-33"><a href="#9-33" class="headerlink" title="9.33"></a>9.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> begin = v.begin();</span><br><span class="line"><span class="keyword">while</span> (begin != v.end()) </span><br><span class="line">&#123;</span><br><span class="line">    ++begin;</span><br><span class="line">    <span class="comment">/*begin = */</span>v.insert(begin, <span class="number">42</span>);</span><br><span class="line">    ++begin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : v)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure><h3 id="9-34"><a href="#9-34" class="headerlink" title="9.34"></a>9.34</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">iter = vi.begin();</span><br><span class="line"><span class="keyword">while</span>(iter != vi.end())</span><br><span class="line">    <span class="keyword">if</span>(*iter % <span class="number">2</span>)</span><br><span class="line">        iter = vi.insert(iter, *iter);</span><br><span class="line">    ++iter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FIXED</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> cur = data.begin(); cur != data.end(); ++cur)</span><br><span class="line">    <span class="keyword">if</span>(*cur &amp; <span class="number">0x1</span>)</span><br><span class="line">        cur = data.insert(cur, *cur), ++cur;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : data)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure><h3 id="9-35"><a href="#9-35" class="headerlink" title="9.35"></a>9.35</h3><p><code>size</code> 是目前保存的元素数量</p><p><code>capacity</code> 是在必须重新申请内存之前能存储的最大元素数量</p><h3 id="9-36"><a href="#9-36" class="headerlink" title="9.36"></a>9.36</h3><p>not</p><h3 id="9-37"><a href="#9-37" class="headerlink" title="9.37"></a>9.37</h3><p><code>list</code> 不连续存储数据</p><p><code>array</code> 是固定的大小</p><h3 id="9-38"><a href="#9-38" class="headerlink" title="9.38"></a>9.38</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span> buffer; <span class="built_in">cin</span> &gt;&gt; buffer; v.push_back(buffer))</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-39"><a href="#9-39" class="headerlink" title="9.39"></a>9.39</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; svec;</span><br><span class="line">svec.reserve(<span class="number">1024</span>);</span><br><span class="line"><span class="built_in">string</span> word;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; word)</span><br><span class="line">    svec.push_back(word);</span><br><span class="line">svec.resize(svec.size() + svec.size()/<span class="number">2</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The while loop will read words from cin and store them in out vector. Even if we initially reserved 1024 elements, if there are more words read from cin, our vector's capacity will be automatically increased (most implementations will double the previous capacity) to accommodate them.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">And now comes the catch. resize() is different from reserve(). In this case resize() will add another svec.size()/2 value initialized elements to svec. If this exceeds svec.capacity() it will also automatically increase it to accommodate the new elements.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="9-40"><a href="#9-40" class="headerlink" title="9.40"></a>9.40</h3><div class="table-container"><table><thead><tr><th style="text-align:center">read</th><th style="text-align:center">size</th><th style="text-align:center">capacity</th></tr></thead><tbody><tr><td style="text-align:center">256</td><td style="text-align:center">384</td><td style="text-align:center">1024</td></tr><tr><td style="text-align:center">512</td><td style="text-align:center">768</td><td style="text-align:center">1024</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">1500</td><td style="text-align:center">2000(clang is 2048)</td></tr><tr><td style="text-align:center">1048</td><td style="text-align:center">1572</td><td style="text-align:center">2048</td></tr></tbody></table></div><h3 id="9-41"><a href="#9-41" class="headerlink" title="9.41"></a>9.41</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v&#123; <span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span> &#125;;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(v.cbegin(), v.cend())</span></span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-42"><a href="#9-42" class="headerlink" title="9.42"></a>9.42</h3><p><code>str.reserve(120)</code></p><h3 id="9-43"><a href="#9-43" class="headerlink" title="9.43"></a>9.43</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace_with</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="built_in">string</span> <span class="keyword">const</span>&amp; oldVal, <span class="built_in">string</span> <span class="keyword">const</span>&amp; newVal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> cur = s.begin(); cur &lt;= s.end() - oldVal.size(); )</span><br><span class="line">        <span class="keyword">if</span> (oldVal == <span class="built_in">string</span>&#123; cur, cur + oldVal.size() &#125;)</span><br><span class="line">            cur = s.erase(cur, cur + oldVal.size()),</span><br><span class="line">            cur = s.insert(cur, newVal.begin(), newVal.end()),</span><br><span class="line">            cur += newVal.size();</span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            ++cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s&#123; <span class="string">"To drive straight thru is a foolish, tho courageous act."</span> &#125;;</span><br><span class="line">    replace_with(s, <span class="string">"tho"</span>, <span class="string">"though"</span>);</span><br><span class="line">    replace_with(s, <span class="string">"thru"</span>, <span class="string">"through"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-44"><a href="#9-44" class="headerlink" title="9.44"></a>9.44</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replace_with</span><span class="params">(<span class="built_in">string</span> &amp;s, <span class="built_in">string</span> <span class="keyword">const</span>&amp; oldVal, <span class="built_in">string</span> <span class="keyword">const</span>&amp; newVal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> pos = <span class="number">0</span>; pos &lt;= s.size() - oldVal.size();)</span><br><span class="line">        <span class="keyword">if</span> (s[pos] == oldVal[<span class="number">0</span>] &amp;&amp; s.substr(pos, oldVal.size()) == oldVal)</span><br><span class="line">            s.replace(pos, oldVal.size(), newVal),</span><br><span class="line">            pos += newVal.size();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ++pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s&#123; <span class="string">"To drive straight thru is a foolish, tho courageous act."</span> &#125;;</span><br><span class="line">    replace_with(s, <span class="string">"tho"</span>, <span class="string">"though"</span>);</span><br><span class="line">    replace_with(s, <span class="string">"thru"</span>, <span class="string">"through"</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-45"><a href="#9-45" class="headerlink" title="9.45"></a>9.45</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fun</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> <span class="keyword">const</span>&amp; a, <span class="built_in">string</span> <span class="keyword">const</span>&amp; b)</span></span>&#123;</span><br><span class="line">    s.insert(s.begin, a.begin(), a.end());</span><br><span class="line">    <span class="keyword">return</span> s.append(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-46"><a href="#9-46" class="headerlink" title="9.46"></a>9.46</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fun</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> <span class="keyword">const</span>&amp; pre, <span class="built_in">string</span> <span class="keyword">const</span>&amp; su)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.insert(<span class="number">0</span>, pre);</span><br><span class="line">    s.insert(s.size(), su);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-47"><a href="#9-47" class="headerlink" title="9.47"></a>9.47</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find_first_of</span></span><br><span class="line"><span class="built_in">string</span> numbers&#123; <span class="string">"123456789"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> alphabet&#123; <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> str&#123; <span class="string">"ab2c3d7R4E6"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"numeric characters: "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; (pos = str.find_first_of(numbers, pos)) != <span class="built_in">string</span>::npos; ++pos)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[pos] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nalphabetic characters: "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; (pos = str.find_first_of(alphabet, pos)) != <span class="built_in">string</span>::npos; ++pos)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[pos] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// find_first_not_of</span></span><br><span class="line"><span class="built_in">string</span> numbers&#123; <span class="string">"0123456789"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> alphabet&#123; <span class="string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> str&#123; <span class="string">"ab2c3d7R4E6"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"numeric characters: "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; (pos = str.find_first_not_of(alphabet, pos)) != <span class="built_in">string</span>::npos; ++pos)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[pos] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\nalphabetic characters: "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">0</span>; (pos = str.find_first_not_of(numbers, pos)) != <span class="built_in">string</span>::npos; ++pos)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[pos] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-48"><a href="#9-48" class="headerlink" title="9.48"></a>9.48</h3><p><code>string::npos</code></p><h3 id="9-49"><a href="#9-49" class="headerlink" title="9.49"></a>9.49</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"../data/letter.txt"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!ifs) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> longest;</span><br><span class="line"><span class="keyword">auto</span> update_with = [&amp;longest](<span class="built_in">string</span> <span class="keyword">const</span>&amp; curr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>::npos == curr.find_first_not_of(<span class="string">"aceimnorsuvwxz"</span>))</span><br><span class="line">        longest = longest.size() &lt; curr.size() ? curr : longest;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span> curr; ifs &gt;&gt; curr; update_with(curr));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; longest &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="9-50"><a href="#9-50" class="headerlink" title="9.50"></a>9.50</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">sum_for_int</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="keyword">const</span>&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; s : v)</span><br><span class="line">        sum += stoi(s);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">sum_for_float</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="keyword">const</span>&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; s : v)</span><br><span class="line">        sum += stof(s);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v = &#123; <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4.5"</span> &#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum_for_int(v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum_for_float(v) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-51"><a href="#9-51" class="headerlink" title="9.51"></a>9.51</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_date</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> year, month, day;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    My_date(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">unsigned</span> tag;</span><br><span class="line">        <span class="keyword">unsigned</span> format;</span><br><span class="line">        format = tag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1/1/1900</span></span><br><span class="line">        <span class="keyword">if</span>(s.find_first_of(<span class="string">"/"</span>)!= <span class="built_in">string</span> :: npos)</span><br><span class="line">        &#123;</span><br><span class="line">            format = <span class="number">0x01</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// January 1, 1900 or Jan 1, 1900</span></span><br><span class="line">        <span class="keyword">if</span>((s.find_first_of(<span class="string">','</span>) &gt;= <span class="number">4</span>) &amp;&amp; s.find_first_of(<span class="string">','</span>)!= <span class="built_in">string</span> :: npos)&#123;</span><br><span class="line">            format = <span class="number">0x10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// Jan 1 1900</span></span><br><span class="line">            <span class="keyword">if</span>(s.find_first_of(<span class="string">' '</span>) &gt;= <span class="number">3</span></span><br><span class="line">                &amp;&amp; s.find_first_of(<span class="string">' '</span>)!= <span class="built_in">string</span> :: npos)&#123;</span><br><span class="line">                format = <span class="number">0x10</span>;</span><br><span class="line">                tag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(format)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x01</span>:</span><br><span class="line">            day = stoi(s.substr(<span class="number">0</span>, s.find_first_of(<span class="string">"/"</span>)));</span><br><span class="line">            month = stoi(s.substr(s.find_first_of(<span class="string">"/"</span>) + <span class="number">1</span>, s.find_last_of(<span class="string">"/"</span>)- s.find_first_of(<span class="string">"/"</span>)));</span><br><span class="line">            year = stoi(s.substr(s.find_last_of(<span class="string">"/"</span>) + <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Jan"</span>) &lt; s.size() )  month = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Feb"</span>) &lt; s.size() )  month = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Mar"</span>) &lt; s.size() )  month = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Apr"</span>) &lt; s.size() )  month = <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"May"</span>) &lt; s.size() )  month = <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Jun"</span>) &lt; s.size() )  month = <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Jul"</span>) &lt; s.size() )  month = <span class="number">7</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Aug"</span>) &lt; s.size() )  month = <span class="number">8</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Sep"</span>) &lt; s.size() )  month = <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Oct"</span>) &lt; s.size() )  month =<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Nov"</span>) &lt; s.size() )  month =<span class="number">11</span>;</span><br><span class="line">            <span class="keyword">if</span>( s.find(<span class="string">"Dec"</span>) &lt; s.size() )  month =<span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> chr = <span class="string">','</span>;</span><br><span class="line">            <span class="keyword">if</span>(tag == <span class="number">1</span>)&#123;</span><br><span class="line">                chr = <span class="string">' '</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            day = stoi(s.substr(s.find_first_of(<span class="string">"123456789"</span>), s.find_first_of(chr) - s.find_first_of(<span class="string">"123456789"</span>)));</span><br><span class="line"></span><br><span class="line">            year = stoi(s.substr(s.find_last_of(<span class="string">' '</span>) + <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"day:"</span> &lt;&lt; day &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"month: "</span> &lt;&lt; month &lt;&lt; <span class="string">" "</span> &lt;&lt; <span class="string">"year: "</span> &lt;&lt; year;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">My_date <span class="title">d</span><span class="params">(<span class="string">"Jan 1 1900"</span>)</span></span>;</span><br><span class="line">    d.print();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-52"><a href="#9-52" class="headerlink" title="9.52"></a>9.52</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> expression&#123; <span class="string">"This is (pezy)."</span> &#125;;</span><br><span class="line">    <span class="keyword">bool</span> bSeen = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; stk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;s : expression)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="string">'('</span>) &#123; bSeen = <span class="literal">true</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == <span class="string">')'</span>) bSeen = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (bSeen) stk.push(s);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">string</span> repstr;</span><br><span class="line">    <span class="keyword">while</span> (!stk.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        repstr += stk.top();</span><br><span class="line">        stk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    expression.replace(expression.find(<span class="string">"("</span>)+<span class="number">1</span>, repstr.size(), repstr);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; expression &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><h3 id="10-1-amp-10-2"><a href="#10-1-amp-10-2" class="headerlink" title="10.1 &amp; 10.2"></a>10.1 &amp; 10.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10.1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(vec.begin(), vec.end(), <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.2</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; v = &#123; <span class="string">"aa"</span>, <span class="string">"aaa"</span>, <span class="string">"aa"</span>, <span class="string">"cc"</span> &#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; count(v.begin(), v.end(), <span class="string">"aa"</span>);</span><br></pre></td></tr></table></figure><h3 id="10-3-amp-10-4"><a href="#10-3-amp-10-4" class="headerlink" title="10.3 &amp;10.4"></a>10.3 &amp;10.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10.3</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> sum = accumulate(vec.cbegin(), vec.end(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.4</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vd = &#123; <span class="number">1.1</span>, <span class="number">0.5</span>, <span class="number">3.3</span> &#125;;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; accumulate(vd.cbegin(), vd.cend(), <span class="number">0</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The ouput is 4 rather than 4.9 as expected.</span></span><br><span class="line"><span class="comment">// The reason is std::accumulate is a template function. </span></span><br><span class="line"><span class="comment">// The third parameter is _Tp __init</span></span><br><span class="line"><span class="comment">// When "0" , an integer, had been specified here, the compiler deduced _Tp as</span></span><br><span class="line"><span class="comment">// interger.As a result , when the following statments were being excuted :</span></span><br><span class="line"><span class="comment">// for (; __first != __last; ++__first)</span></span><br><span class="line"><span class="comment">// __init = __init + *__first;</span></span><br><span class="line"><span class="comment">// return __init;</span></span><br><span class="line"><span class="comment">// all calculation would be converted to integer.</span></span><br></pre></td></tr></table></figure><h3 id="10-5"><a href="#10-5" class="headerlink" title="10.5"></a>10.5</h3><p>For such case, std::equal is going to compare the address value rather than the string value. So the result is not the same as std::string. Try to avoid coding this way. Check <a href="https://github.com/Mooophy/Cpp-Primer/issues/227" target="_blank" rel="noopener">#227</a> for more detail.</p><h3 id="10-6"><a href="#10-6" class="headerlink" title="10.6"></a>10.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">2</span> &#125;;</span><br><span class="line">fill_n(vec.begin(), vec.end(), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="10-7"><a href="#10-7" class="headerlink" title="10.7"></a>10.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec; <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst; <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; i)</span><br><span class="line">    lst.push_back(i);</span><br><span class="line"><span class="comment">//copy(lst.cbegin(), lst.cend(), vec.begin());</span></span><br><span class="line">copy(lst.cbegin(), lst.cend(), back_inserter(vec));</span><br><span class="line"></span><br><span class="line"><span class="comment">// b</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">vec.reserve(<span class="number">10</span>);</span><br><span class="line">fill_n(vec.begin(), <span class="number">10</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="10-8"><a href="#10-8" class="headerlink" title="10.8"></a>10.8</h3><p>Inserters like <code>back_inserter</code> is part of <code>&lt;iterator&gt;</code> rather than <code>&lt;algorithm&gt;</code>.</p><h3 id="10-9"><a href="#10-9" class="headerlink" title="10.9"></a>10.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Sequence&gt;</span><br><span class="line">auto println(Sequence const&amp; seq) -&gt; std::ostream&amp;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; elem : seq) </span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimDups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(a.begin(), a.end());</span><br><span class="line">    println(vs);</span><br><span class="line">    <span class="keyword">auto</span> end = unique(a.begin(), a.end());</span><br><span class="line">    println(vs);</span><br><span class="line">    a.erase(end, a.end());</span><br><span class="line">    println(vs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-10"><a href="#10-10" class="headerlink" title="10.10"></a>10.10</h3><p>将算法与容器分离开</p><h3 id="10-11"><a href="#10-11" class="headerlink" title="10.11"></a>10.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Sequence&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ostream&amp; <span class="title">println</span><span class="params">(Sequence <span class="keyword">const</span>&amp; seq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span>&amp; elem : seq) <span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_shorter</span><span class="params">(<span class="built_in">string</span> <span class="keyword">const</span>&amp; lhs, <span class="built_in">string</span> <span class="keyword">const</span>&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  lhs.size() &lt; rhs.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimdups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(vs.begin(), vs.end());</span><br><span class="line">    <span class="keyword">auto</span> new_end = unique(vs.begin(), vs.end());</span><br><span class="line">    vs.erase(new_end, vs.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v&#123; <span class="string">"1234"</span>, <span class="string">"1234"</span>, <span class="string">"1234"</span>, <span class="string">"Hi"</span>, <span class="string">"alan"</span>, <span class="string">"wang"</span> &#125;;</span><br><span class="line">    elimdups(v);</span><br><span class="line">    stable_sort(v.begin(), v.end(), is_shorter);</span><br><span class="line">    println(v);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-12"><a href="#10-12" class="headerlink" title="10.12"></a>10.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../ch07/ex7_26.h"</span>     <span class="comment">// Sales_data class.</span></span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">compareIsbn</span><span class="params">(<span class="keyword">const</span> Sales_data &amp;sd1, <span class="keyword">const</span> Sales_data &amp;sd2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sd1.isbn().size() &lt; sd2.isbn().size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data d1("aa"), d2("aaaa"), d3("aaa"), d4("z"), d5("aaaaz");</span><br><span class="line">    <span class="built_in">vector</span>&lt;Sales_data&gt; v&#123; d1, d2, d3, d4, d5 &#125;;</span><br><span class="line">    sort(v.begin(), v.end(), compareIsbn);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span> &amp;element : v)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; element.isbn() &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a>10.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">predicate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> s.size() &gt;= <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> v = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&#123; <span class="string">"a"</span>, <span class="string">"as"</span>, <span class="string">"aasss"</span>, <span class="string">"aaaaassaa"</span>, <span class="string">"aaaaaabba"</span>, <span class="string">"aaa"</span> &#125;;</span><br><span class="line">    <span class="keyword">auto</span> pivot = partition(v.begin(), v.end(), predicate);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = v.cbegin(); it != pivot; ++it)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-14"><a href="#10-14" class="headerlink" title="10.14"></a>10.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> add = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a + b;&#125;</span><br></pre></td></tr></table></figure><h3 id="10-15"><a href="#10-15" class="headerlink" title="10.15"></a>10.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [a](<span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a + b;&#125;</span><br></pre></td></tr></table></figure><h3 id="10-16"><a href="#10-16" class="headerlink" title="10.16"></a>10.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type sz)</span></span>&#123;</span><br><span class="line">    sort(s.begin(), s.end(),[](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1, <span class="keyword">const</span> <span class="built_in">string</span> &amp;s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> s1 &lt; s2;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">auto</span> end = unique(s.begin(), s.end());</span><br><span class="line">    s.erase(end, s.end());</span><br><span class="line">    <span class="keyword">auto</span> wc = find_if(s.begin(), s.end(), [sz](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1)&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.size() &gt;= sz;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">auto</span> cc = s.end() - wc;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="string">" "</span> &lt;&lt; make_plural(cc, <span class="string">"word"</span>, <span class="string">"s"</span>) &lt;&lt; <span class="string">" of length "</span> &lt;&lt; sz &lt;&lt; <span class="string">" or longer "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    for_each(wc, s.end(), [](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s1)&#123;</span><br><span class="line">       <span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-17"><a href="#10-17" class="headerlink" title="10.17"></a>10.17</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sort(v.begin(), v.end(), [](<span class="keyword">const</span> Sales_data &amp;a, <span class="keyword">const</span> Sales_data &amp;b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.isbn().size() &lt; b.isbn().size();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-18-amp-10-19"><a href="#10-18-amp-10-19" class="headerlink" title="10.18 &amp; 10.19"></a>10.18 &amp; 10.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from ex 10.9</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimdups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(vs.begin(), vs.end());</span><br><span class="line">    <span class="keyword">auto</span> new_end = unique(vs.begin(), vs.end());</span><br><span class="line">    vs.erase(new_end, vs.end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ex10.18</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies_partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vs, <span class="keyword">size_t</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    elimdups(vs);</span><br><span class="line">    <span class="keyword">auto</span> pivot = partition(vs.begin(), vs.end(), [sz](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123;</span><br><span class="line">        <span class="keyword">return</span> s.size() &gt;= sz;&#125;</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vs.cbegin(); it != pivot; ++it)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ex10.19</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies_stable_partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vs, <span class="keyword">size_t</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    elimdups(vs);</span><br><span class="line">    <span class="keyword">auto</span> pivot = stable_partition(vs.begin(), vs.end(), [sz](<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)&#123;</span><br><span class="line">        <span class="keyword">return</span> s.size() &gt;= sz;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = vs.cbegin(); it != pivot; ++it)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ex10.18</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v&#123;</span><br><span class="line">        <span class="string">"the"</span>, <span class="string">"quick"</span>, <span class="string">"red"</span>, <span class="string">"fox"</span>, <span class="string">"jumps"</span>, <span class="string">"over"</span>, <span class="string">"the"</span>, <span class="string">"slow"</span>, <span class="string">"red"</span>, <span class="string">"turtle"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ex10.18: "</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v1(v);</span><br><span class="line">    biggies_partition(v1, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ex10.19</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ex10.19: "</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v2(v);</span><br><span class="line">    biggies_stable_partition(v2, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-20-amp-10-21"><a href="#10-20-amp-10-21" class="headerlink" title="10.20 &amp; 10.21"></a>10.20 &amp; 10.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 10.20</span></span><br><span class="line"><span class="keyword">auto</span> count = count_if(v.begin(), v.end(), [](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123;</span><br><span class="line">    <span class="keyword">return</span> s.size() &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.21</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">auto</span> what = [i]()&#123;<span class="keyword">return</span> i &gt; <span class="number">0</span> ? --i : !i&#125;;</span><br></pre></td></tr></table></figure><h3 id="10-22"><a href="#10-22" class="headerlink" title="10.22"></a>10.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLesserThanOrEqualTo6</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="built_in">string</span>::size_type sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.size() &lt;= sz;</span><br><span class="line">&#125;</span><br><span class="line">sort(v.begin(), v.end(), bind(isLesserThanOrEqualTo6(_1, <span class="number">6</span>)));</span><br></pre></td></tr></table></figure><h3 id="10-23"><a href="#10-23" class="headerlink" title="10.23"></a>10.23</h3><p>Assuming the function to be bound have <code>n</code> parameters, bind take <code>n + 1</code> parameters. The additional one is for the function to be bound itself.</p><h3 id="10-24"><a href="#10-24" class="headerlink" title="10.24"></a>10.24</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">check_size</span><span class="params">(<span class="built_in">string</span> <span class="keyword">const</span>&amp; str, <span class="keyword">size_t</span> sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.size() &lt; sz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"123456"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> result = find_if(vec.begin(), vec.end(), bind(check_size, str, _1));</span><br><span class="line">    <span class="keyword">if</span> (result != vec.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Not found"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-25"><a href="#10-25" class="headerlink" title="10.25"></a>10.25</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimdups</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;vs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(vs.begin(), vs.end());</span><br><span class="line">    vs.erase(unique(vs.begin(), vs.end()), vs.end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check_size</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="built_in">string</span>::size_type sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.size() &gt;= sz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">biggies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;words, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type sz)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    elimdups(words);</span><br><span class="line">    <span class="keyword">auto</span> iter = stable_partition(words.begin(), words.end(), bind(check_size, _1, sz));</span><br><span class="line">    for_each(words.begin(), iter, [](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123; <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span>; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v&#123;</span><br><span class="line">        <span class="string">"the"</span>, <span class="string">"quick"</span>, <span class="string">"red"</span>, <span class="string">"fox"</span>, <span class="string">"jumps"</span>, <span class="string">"over"</span>, <span class="string">"the"</span>, <span class="string">"slow"</span>, <span class="string">"red"</span>, <span class="string">"turtle"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    biggies(v, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-26"><a href="#10-26" class="headerlink" title="10.26"></a>10.26</h3><ul><li><code>back_inserter</code> uses <code>push_back</code>.</li><li><code>front_inserter</code> uses <code>push_front</code>.</li><li><code>insert</code> uses <code>insert</code></li></ul><h3 id="10-27"><a href="#10-27" class="headerlink" title="10.27"></a>10.27</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst;</span><br><span class="line">unique_copy(vec.begin(), vec.end(), back_inserter(lst));</span><br></pre></td></tr></table></figure><h3 id="10-28"><a href="#10-28" class="headerlink" title="10.28"></a>10.28</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Sequence&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Sequence <span class="keyword">const</span>&amp; seq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : seq)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// uses inserter</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst1;</span><br><span class="line">    copy(vec.cbegin(), vec.cend(), inserter(lst1, lst1.begin()));</span><br><span class="line">    print(lst1);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// uses back_inserter</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lit2;</span><br><span class="line">    copy(vec.cbegin(), vec.cend(), back_inserter(lit2));</span><br><span class="line">    print(lit2);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// uses front_inserter</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst3;</span><br><span class="line">    copy(vec.cbegin(), vec.cend(), front_inserter(lst3));</span><br><span class="line">    print(lst3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-29"><a href="#10-29" class="headerlink" title="10.29"></a>10.29</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">"D:\\WorkSpace\\C++\\data\\book.txt"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!fin)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">istream_iterator&lt;<span class="built_in">string</span>&gt; in(fin), eof;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line">copy(in, eof, back_inserter(vec));</span><br><span class="line">copy(vec.cbegin(), vec.cend(), ostream_iterator&lt;<span class="built_in">string</span>&gt;(<span class="built_in">cout</span>, <span class="string">"\n"</span>));</span><br></pre></td></tr></table></figure><h3 id="10-30"><a href="#10-30" class="headerlink" title="10.30"></a>10.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(istream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">std</span>::<span class="built_in">cin</span>), istream_iterator&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">sort(vec.begin(), vec.end());</span><br><span class="line">copy(vec.cbegin(), vec.cend(), ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>, <span class="string">" "</span>));</span><br></pre></td></tr></table></figure><h3 id="10-31"><a href="#10-31" class="headerlink" title="10.31"></a>10.31</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">istream_iterator&lt;<span class="keyword">int</span>&gt; in_iter(<span class="built_in">cin</span>), eof;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">while</span> (in_iter != eof)</span><br><span class="line">    vec.push_back(*in_iter++);</span><br><span class="line">sort(vec.begin(), vec.end());</span><br><span class="line">unique_copy(vec.cbegin(), vec.cend(), ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>, <span class="string">" "</span>));</span><br></pre></td></tr></table></figure><h3 id="10-32"><a href="#10-32" class="headerlink" title="10.32"></a>10.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">istream_iterator&lt;Sales_item&gt; in_iter(<span class="built_in">cin</span>), in_eof;</span><br><span class="line"><span class="built_in">vector</span>&lt;Sales_item&gt; vec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (in_iter != in_eof)</span><br><span class="line">    vec.push_back(*in_iter++);</span><br><span class="line"></span><br><span class="line">sort(vec.begin(), vec.end(), compareIsbn);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> beg = vec.cbegin(), end = beg; beg != vec.cend(); beg = end)</span><br><span class="line">&#123;</span><br><span class="line">    end = find_if(beg, vec.cend(), [beg](<span class="keyword">const</span> Sales_item &amp;item) &#123; <span class="keyword">return</span> item.isbn() != beg-&gt;isbn(); &#125;);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; accumulate(beg, end, Sales_item(beg-&gt;isbn())) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-33"><a href="#10-33" class="headerlink" title="10.33"></a>10.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">4</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(argv[<span class="number">1</span>])</span></span>;</span><br><span class="line">    ofstream ofs_odd(argv[2]), ofs_even(argv[3]);</span><br><span class="line"></span><br><span class="line">    istream_iterator&lt;<span class="keyword">int</span>&gt; in(ifs), in_eof;</span><br><span class="line">    ostream_iterator&lt;<span class="keyword">int</span>&gt; out_odd(ofs_odd, <span class="string">" "</span>), out_even(ofs_even, <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    for_each(in, in_eof, [&amp;out_odd, &amp;out_even](<span class="keyword">const</span> <span class="keyword">int</span> i)&#123;</span><br><span class="line">        (i &amp; <span class="number">0x1</span> ? out_odd : out_even) = i;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-34-10-37"><a href="#10-34-10-37" class="headerlink" title="10.34 ~ 10.37"></a>10.34 ~ 10.37</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.34</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.crbegin(); it != vec.crend(); it++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.35</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.cend();;)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(--it) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(it == vec.cbegin())</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.36</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; lst = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span> &#125;;</span><br><span class="line"><span class="keyword">auto</span> last = find(lst.crbegin(), lst.crend(), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; distance(last, lst.crend());</span><br><span class="line"></span><br><span class="line"><span class="comment">//10.37</span></span><br><span class="line">copy(vec.cbegin() + <span class="number">3</span>, vec.cbegin() + <span class="number">7</span>, lst.rbegin());</span><br><span class="line"><span class="comment">//     0, 1, 2, 3, 4, 5, 6, 7, 8, 9</span></span><br><span class="line"><span class="comment">//           ^              ^</span></span><br><span class="line"><span class="comment">//          rend          rbegin</span></span><br><span class="line"><span class="comment">// @note: std::copy copies the range [first, last) into result.</span></span><br><span class="line"><span class="comment">//        hence, the arguments here denote:</span></span><br><span class="line"><span class="comment">//        [7 6 5 4 3 2)</span></span><br><span class="line"><span class="comment">//                   ^ this one is specified but not included.</span></span><br></pre></td></tr></table></figure><h3 id="10-38"><a href="#10-38" class="headerlink" title="10.38"></a>10.38</h3><ul><li>Input iterators : <code>==</code>, <code>!=</code>, <code>++</code>, <code>*</code>, <code>-&gt;</code></li><li>Output iterators : <code>++</code>, <code>*</code></li><li>Forward iterators : <code>==</code>, <code>!=</code>, <code>++</code>, <code>*</code>, <code>-&gt;</code></li><li>Bidirectional iterators : <code>==</code>, <code>!=</code>, <code>++</code>, <code>--</code>, <code>*</code>, <code>-&gt;</code></li><li>Random-access iterators : <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>++</code>, <code>--</code>, <code>+</code>, <code>+=</code>, <code>-</code>, <code>-=</code>, <code>-</code>(two iterators), <code>*</code>, <code>-&gt;</code>, <code>iter[n]</code> == <code>* (iter + n)</code></li></ul><h3 id="10-39"><a href="#10-39" class="headerlink" title="10.39"></a>10.39</h3><p><code>list</code> have the <strong>Bidirectional iterators</strong>.</p><p><code>vector</code> have the <strong>Random-access iterators</strong>.</p><h3 id="10-40"><a href="#10-40" class="headerlink" title="10.40"></a>10.40</h3><ul><li><code>copy</code> : first and second are Input iterators, last is Output iterators.</li><li><code>reverse</code> : Bidirectional iterators.</li><li><code>unique</code> : Forward iterators.</li></ul><h3 id="10-41"><a href="#10-41" class="headerlink" title="10.41"></a>10.41</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">replace(beg, end, old_val, new_val); <span class="comment">// replace the old_elements in the input range as new_elements.</span></span><br><span class="line">replace_if(beg, end, pred, new_val); <span class="comment">// replace the elements in the input range which pred is true as new_elements.</span></span><br><span class="line">replace_copy(beg, end, dest, old_val, new_val); <span class="comment">// copy the new_elements which is old_elements in the input range into dest.</span></span><br><span class="line">replace_copy_if(beg, end, dest, pred, new_val); <span class="comment">// copy the new_elements which pred is true in the input range into dest.</span></span><br></pre></td></tr></table></figure><h3 id="10-42"><a href="#10-42" class="headerlink" title="10.42"></a>10.42</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimDups</span><span class="params">(<span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; &amp;words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    words.sort();</span><br><span class="line">    words.unique();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; l = &#123; <span class="string">"aa"</span>, <span class="string">"aa"</span>, <span class="string">"aa"</span>, <span class="string">"aa"</span>, <span class="string">"aasss"</span>, <span class="string">"aa"</span> &#125;;</span><br><span class="line">    elimDups(l);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : l)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h2><h3 id="11-1"><a href="#11-1" class="headerlink" title="11.1"></a>11.1</h3><p><code>map</code> : 关联容器，元素根据键值对存储和检索，二叉搜索树实现</p><p><code>vector</code> :  顺序容器，元素按其在容器中的位置顺序存储和访问，动态数组实现</p><h3 id="11-2"><a href="#11-2" class="headerlink" title="11.2"></a>11.2</h3><p><code>list</code> : 不需要随机访问数据，但希望在容器的任何位置(例如内存管理分配器中)快速插入或删除数据。</p><p><code>vector</code> : 连续存储和处理一组数据时，支持随机访问和末尾的快速插入和删除。</p><p><code>deque</code> : FIFO。</p><p><code>map</code> : 将相关信息配对时使用映射，需要在大量数据中查找pair时。</p><p><code>set</code> : 创建一个有序对象的列表(树)，以便快速遍历/搜索时。</p><h3 id="11-3"><a href="#11-3" class="headerlink" title="11.3"></a>11.3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">size_t</span>&gt; &amp;mp, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s:words)</span><br><span class="line">        ++mp[s];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-4"><a href="#11-4" class="headerlink" title="11.4"></a>11.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">auto strip(string&amp; str) -&gt; string const&amp;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch : str) ch = <span class="built_in">tolower</span>(ch);</span><br><span class="line">    str.erase(remove_if(str.begin(), str.end(), <span class="built_in">ispunct</span>), str.end());</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">size_t</span>&gt; &amp;mp, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> s:words)</span><br><span class="line">        ++mp[strip(s)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-5"><a href="#11-5" class="headerlink" title="11.5"></a>11.5</h3><p><a href="https://stackoverflow.com/questions/16286714/advantages-of-stdset-vs-vectors-or-maps" target="_blank" rel="noopener">map vs set</a></p><p>形成字符串有序集就直接用 <code>set</code> ，如果还想知道每个字符的含义，比如出现次数，就用 <code>map</code></p><h3 id="11-6"><a href="#11-6" class="headerlink" title="11.6"></a>11.6</h3><p><a href="https://stackoverflow.com/questions/2302681/c-stl-list-vs-set" target="_blank" rel="noopener">list vs set</a></p><p><code>set</code> 单一有序，<code>list</code> 可重复无序</p><h3 id="11-7"><a href="#11-7" class="headerlink" title="11.7"></a>11.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Families = <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">make_families</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Families families;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> ln; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Last name:\n"</span>, <span class="built_in">cin</span> &gt;&gt; ln &amp;&amp; ln != <span class="string">"@q"</span>;)</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> cn; <span class="built_in">cout</span> &lt;&lt; <span class="string">"|-Children's names:\n"</span>, <span class="built_in">cin</span> &gt;&gt; cn &amp;&amp; cn != <span class="string">"@q"</span>;)</span><br><span class="line">            families[ln].push_back(cn);</span><br><span class="line">    <span class="keyword">return</span> families;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">print</span><span class="params">(Families <span class="keyword">const</span>&amp; families)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; family : families)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; family.first &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; child : family.second)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; child &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(make_families());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-8"><a href="#11-8" class="headerlink" title="11.8"></a>11.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; exclude = &#123; <span class="string">"aa"</span>, <span class="string">"bb"</span>, <span class="string">"cc"</span>, <span class="string">"dd"</span>, <span class="string">"ee"</span>, <span class="string">"ff"</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> word; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter plz:\n"</span>, <span class="built_in">cin</span> &gt;&gt; word; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> is_excluded = binary_search(exclude.cbegin(), exclude.cend(), word);</span><br><span class="line">        <span class="keyword">auto</span> reply = is_excluded ? <span class="string">"excluded"</span> : <span class="string">"not excluded"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; reply &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-9-amp-11-10"><a href="#11-9-amp-11-10" class="headerlink" title="11.9 &amp; 11.10"></a>11.9 &amp; 11.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 11.9</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">list</span>&lt;<span class="keyword">size_t</span>&gt;&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.10</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="keyword">int</span>&gt; mvt;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="keyword">int</span>&gt; mlt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line">mv.insert(pair&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="keyword">int</span>&gt;(vi.begin(), <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// but when using this one the compiler complained that</span></span><br><span class="line"><span class="comment">// error: no match for 'operator&lt;' in '__x &lt; __y'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; li;</span><br><span class="line">ml.insert(pair&lt;<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="keyword">int</span>&gt;(li.begin(), <span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="11-11"><a href="#11-11" class="headerlink" title="11.11"></a>11.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../ch07/ex7_26.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">less</span><span class="params">(Sales_data <span class="keyword">const</span>&amp; lhs, Sales_data <span class="keyword">const</span>&amp; rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.isbn() &lt; rhs.isbn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> Less = <span class="keyword">bool</span> (*)(Sales_data <span class="keyword">const</span>&amp;, Sales_data <span class="keyword">const</span>&amp;);</span><br><span class="line">    <span class="built_in">multiset</span>&lt;Sales_data, Less&gt; bookstore(less);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-12-amp-11-13"><a href="#11-12-amp-11-13" class="headerlink" title="11.12 &amp; 11.13"></a>11.12 &amp; 11.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;&gt; vec;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &amp;s, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;s.size() &amp;&amp; i &lt; a.size();i++)</span><br><span class="line">        vec.push_back(&#123;s[i],a[i]&#125;);</span><br><span class="line">        <span class="comment">//vec.push_back(pair&lt;string, int&gt;(str, i));</span></span><br><span class="line">        <span class="comment">//vec.push_back(make_pair(str, i));</span></span><br><span class="line">        <span class="comment">//vec.emplace_back(str, i); //easiest way.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-14"><a href="#11-14" class="headerlink" title="11.14"></a>11.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Families</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Child     = pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line">    <span class="keyword">using</span> Children  = <span class="built_in">vector</span>&lt;Child&gt;;</span><br><span class="line">    <span class="keyword">using</span> Data      = <span class="built_in">map</span>&lt;<span class="built_in">string</span>, Children&gt;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(<span class="built_in">string</span> <span class="keyword">const</span>&amp; last_name, <span class="built_in">string</span> <span class="keyword">const</span>&amp; first_name, <span class="built_in">string</span> birthday)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> child = make_pair(first_name, birthday);</span><br><span class="line">        _data[last_name].push_back(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">auto</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; pair : _data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; pair.first &lt;&lt; <span class="string">":\n"</span> ;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; child : pair.second)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; child.first &lt;&lt; <span class="string">" "</span> &lt;&lt; child.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Data _data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Families families;</span><br><span class="line">    <span class="keyword">auto</span> msg = <span class="string">"Please enter last name, first name and birthday:\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> l, f, b; <span class="built_in">cout</span> &lt;&lt; msg, <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; f &gt;&gt; b; families.add(l, f, b));</span><br><span class="line">    families.print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-15"><a href="#11-15" class="headerlink" title="11.15"></a>11.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line"><span class="comment">// key_type : int</span></span><br><span class="line"><span class="comment">// mapped_type : vector&lt;int&gt;</span></span><br><span class="line"><span class="comment">// value_type : pair&lt;int, vector&lt;int&gt;&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-16"><a href="#11-16" class="headerlink" title="11.16"></a>11.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; mp;</span><br><span class="line">mp[<span class="number">1</span>] = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">auto</span> it = mp.cbegin();</span><br><span class="line"><span class="built_in">string</span> s = it-&gt;second;</span><br></pre></td></tr></table></figure><h3 id="11-17"><a href="#11-17" class="headerlink" title="11.17"></a>11.17</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">muliset&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</span><br><span class="line">copy(v.begin(), v.end(), inserter(c, c.end())); <span class="comment">// legal</span></span><br><span class="line">copy(v.begin(), v.end(), back_inserter(c)); <span class="comment">// illegal, no `push_back` in `set`.</span></span><br><span class="line">copy(c.begin(), c.end(), inserter(v, v.end())); <span class="comment">// legal.</span></span><br><span class="line">copy(c.begin(), c.end(), back_inserter(v)); <span class="comment">// legal.</span></span><br></pre></td></tr></table></figure><h3 id="11-18"><a href="#11-18" class="headerlink" title="11.18"></a>11.18</h3><p><code>map&lt;string, size_t&gt;::const_iterator</code></p><h3 id="11-19"><a href="#11-19" class="headerlink" title="11.19"></a>11.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> compareType = <span class="keyword">bool</span> (*)(<span class="keyword">const</span> Sales_data &amp;lhs, <span class="keyword">const</span> Sales_data &amp;rhs);</span><br><span class="line"><span class="built_in">multiset</span>&lt;Sales_data, compareType&gt; bookstore(compareIsbn);</span><br><span class="line"><span class="built_in">multiset</span>&lt;Sales_data, compareType&gt;::iterator c_it = bookstore.begin();</span><br></pre></td></tr></table></figure><h3 id="11-20"><a href="#11-20" class="headerlink" title="11.20"></a>11.20</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">size_t</span>&gt; counts;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">string</span> word; <span class="built_in">cin</span> &gt;&gt; word;)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> result = counts.insert(&#123; word, <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span>(!result.second)</span><br><span class="line">        ++result.first-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> <span class="keyword">const</span>&amp; count : counts)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count.first &lt;&lt; <span class="string">" "</span> &lt;&lt; count.second &lt;&lt; ((count.second &gt; <span class="number">1</span>) ? <span class="string">" times\n"</span> : <span class="string">" time\n"</span>);</span><br></pre></td></tr></table></figure><h3 id="11-21"><a href="#11-21" class="headerlink" title="11.21"></a>11.21</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">size_t</span>&gt; word_count;</span><br><span class="line"><span class="built_in">string</span> word;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; word)</span><br><span class="line">    ++word_count.insert(&#123;word, <span class="number">0</span>&#125;).first-&gt;second; <span class="comment">// 计数</span></span><br></pre></td></tr></table></figure><h3 id="11-22"><a href="#11-22" class="headerlink" title="11.22"></a>11.22</h3><p><code>map&lt;string, int&gt;</code></p><p><code>pair&lt;map&lt;string, vector&lt;int&gt;&gt;, bool&gt;</code></p><h3 id="11-23"><a href="#11-23" class="headerlink" title="11.23"></a>11.23</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">multimap</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; families;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> lname, cname; <span class="built_in">cin</span> &gt;&gt; cname &gt;&gt; lname; families.emplace(lname, cname));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span>&amp; family : families)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; family.second &lt;&lt; <span class="string">" "</span> &lt;&lt; family.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-24-11-26"><a href="#11-24-11-26" class="headerlink" title="11.24 ~ 11.26"></a>11.24 ~ 11.26</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 11.24</span></span><br><span class="line"><span class="comment">// 建立0-1对</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">m[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.25</span></span><br><span class="line"><span class="comment">// 超范围了</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.26</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; m = &#123; &#123; <span class="number">1</span>,<span class="string">"ss"</span> &#125;,&#123; <span class="number">2</span>,<span class="string">"sz"</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">using</span> KeyType = <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::key_type;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"type to subscript: "</span> &lt;&lt; <span class="keyword">typeid</span>(KeyType).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"returned from the subscript operator: "</span> &lt;&lt; <span class="keyword">typeid</span>(<span class="keyword">decltype</span>(m[<span class="number">1</span>])).name();</span><br></pre></td></tr></table></figure><h3 id="11-27-11-30"><a href="#11-27-11-30" class="headerlink" title="11.27 ~ 11.30"></a>11.27 ~ 11.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 11.27</span></span><br><span class="line"><span class="comment">// multi用count, 有唯一键的直接用find</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.28</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; mp;</span><br><span class="line"><span class="keyword">auto</span> it = mp.find(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.29</span></span><br><span class="line"><span class="comment">// upper_bound == lower_bound, equal_range</span></span><br><span class="line"><span class="comment">// 如果没有找到匹配的元素，则first和second迭代器指向这个键可以的位置插入。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 11.30</span></span><br><span class="line">pos; <span class="comment">// pair</span></span><br><span class="line">pos.first; <span class="comment">// 迭代器</span></span><br><span class="line">pos.first-&gt;second; <span class="comment">// 这个作者的某本书</span></span><br></pre></td></tr></table></figure><h3 id="11-31"><a href="#11-31" class="headerlink" title="11.31"></a>11.31</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">multimap</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; authors&#123;</span><br><span class="line">    &#123; <span class="string">"alan"</span>, <span class="string">"DMA"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"pezy"</span>, <span class="string">"LeetCode"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"alan"</span>, <span class="string">"CLRS"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"wang"</span>, <span class="string">"FTP"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"pezy"</span>, <span class="string">"CP5"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"wang"</span>, <span class="string">"CPP-Concurrency"</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">string</span> author = <span class="string">"pezy"</span>;</span><br><span class="line"><span class="built_in">string</span> work = <span class="string">"CP5"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> found = authors.find(author);</span><br><span class="line"><span class="keyword">auto</span> count = authors.count(author);</span><br><span class="line"><span class="keyword">while</span> (count) &#123;</span><br><span class="line">    <span class="keyword">if</span> (found-&gt;second == work) &#123;</span><br><span class="line">        authors.erase(found);</span><br><span class="line">        <span class="keyword">break</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">    ++found;</span><br><span class="line">    --count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;author : authors)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; author.first &lt;&lt; <span class="string">" "</span> &lt;&lt; author.second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="11-32"><a href="#11-32" class="headerlink" title="11.32"></a>11.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">multimap</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; authors&#123;</span><br><span class="line">    &#123; <span class="string">"alan"</span>, <span class="string">"DMA"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"pezy"</span>, <span class="string">"LeetCode"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"alan"</span>, <span class="string">"CLRS"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"wang"</span>, <span class="string">"FTP"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"pezy"</span>, <span class="string">"CP5"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"wang"</span>, <span class="string">"CPP-Concurrency"</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">multiset</span>&lt;<span class="built_in">string</span>&gt;&gt; order_authors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;author : authors)</span><br><span class="line">    order_authors[author.first].insert(author.second);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;author : order_authors) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; author.first &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;work : author.second)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; work &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-33"><a href="#11-33" class="headerlink" title="11.33"></a>11.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; buildMap(ifstream &amp;map_file)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; trans_map;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> key, value; map_file &gt;&gt; key &amp;&amp; getline(map_file, value); )</span><br><span class="line">        <span class="keyword">if</span> (value.size() &gt; <span class="number">1</span>) trans_map[key] = value.substr(<span class="number">1</span>).substr(<span class="number">0</span>, value.find_last_not_of(<span class="string">' '</span>));</span><br><span class="line">    <span class="keyword">return</span> trans_map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp; <span class="title">transform</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">const</span> <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; &amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> map_it = m.find(s);</span><br><span class="line">    <span class="keyword">return</span> map_it == m.cend() ? s : map_it-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">word_transform</span><span class="params">(ifstream &amp;<span class="built_in">map</span>, ifstream &amp;input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> trans_map = buildMap(<span class="built_in">map</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> text; getline(input, text); ) &#123;</span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">iss</span><span class="params">(text)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> word; iss &gt;&gt; word; )</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; transform(word, trans_map) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs_map</span><span class="params">(<span class="string">"../data/word_transformation_bad.txt"</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs_content</span><span class="params">(<span class="string">"../data/given_to_transform.txt"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (ifs_map &amp;&amp; ifs_content) word_transform(ifs_map, ifs_content);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cerr</span> &lt;&lt; <span class="string">"can't find the documents."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-34"><a href="#11-34" class="headerlink" title="11.34"></a>11.34</h3><p>可能会创建原先不存在的键值对</p><h3 id="11-35"><a href="#11-35" class="headerlink" title="11.35"></a>11.35</h3><ul><li>use subscript operator: if a word does appear multiple times, our loops will put the <strong>last</strong> corresponding phrase into trans_map</li><li>use <code>insert</code>: if a word does appear multiple times, our loops will put the <strong>first</strong> corresponding phrase into trans_map</li></ul><h3 id="11-36"><a href="#11-36" class="headerlink" title="11.36"></a>11.36</h3><p>不会被替换，因为替换规则首先得满足 <code>value.size() &gt; 1</code></p><h3 id="11-37"><a href="#11-37" class="headerlink" title="11.37"></a>11.37</h3><ul><li>Ordered Associative Container</li><li><ul><li>Standard Traversal encounters elements in sorted order<ul><li>Order predicate may be specified</li><li>Default order predicate is “less than”, defined using operator&lt; for the element type</li><li>Popular implementations: OrderedVector, BinarySearchTree</li><li>Search operations required to have O(log <em>n</em>) runtime</li><li>Insert, Remove operations should either be seldom used or have O(log <em>n</em>) runtime</li></ul></li></ul></li><li>Unordered Associative Container</li><li><ul><li>Standard Traversal encounters elements in unspecified order<ul><li>Search, Insert, Remove operations should have average-case constant runtime</li><li>Popular implementations use hashing</li></ul></li></ul></li></ul><h3 id="11-38"><a href="#11-38" class="headerlink" title="11.38"></a>11.38</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wordCounting</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="keyword">size_t</span>&gt; word_count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> word; <span class="built_in">cin</span> &gt;&gt; word; ++word_count[word]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;w : word_count)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; w.first &lt;&lt; <span class="string">" occurs "</span> &lt;&lt; w.second &lt;&lt; (w.second &gt; <span class="number">1</span> ? <span class="string">"times"</span> : <span class="string">"time"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wordTransformation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs_map</span><span class="params">(<span class="string">"../data/word_transformation.txt"</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs_content</span><span class="params">(<span class="string">"../data/given_to_transform.txt"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!ifs_map || !ifs_content) &#123;</span><br><span class="line">        <span class="built_in">cerr</span> &lt;&lt; <span class="string">"can't find the documents."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; trans_map;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> key, value; ifs_map &gt;&gt; key &amp;&amp; getline(ifs_map, value); )</span><br><span class="line">        <span class="keyword">if</span> (value.size() &gt; <span class="number">1</span>) </span><br><span class="line">            trans_map[key] = value.substr(<span class="number">1</span>).substr(<span class="number">0</span>, value.find_last_not_of(<span class="string">' '</span>));</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> text, word; getline(ifs_content, text); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">istringstream</span> iss(text); iss &gt;&gt; word; ) &#123;</span><br><span class="line">            <span class="keyword">auto</span> map_it = trans_map.find(word);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; (map_it == trans_map.cend() ? word : map_it-&gt;second) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//wordCounting();</span></span><br><span class="line">    wordTransformation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第十二章"><a href="#第十二章" class="headerlink" title="第十二章"></a>第十二章</h2><h3 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StrBlob b1</span><br><span class="line">&#123;</span><br><span class="line">    StrBlob b2 = &#123;<span class="string">"a"</span>, <span class="string">"an"</span>, <span class="string">"the"</span>&#125;;</span><br><span class="line">    b1 = b2;</span><br><span class="line">    b2.push_back(<span class="string">"about"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// b1 有四个, b2自动销毁了</span></span><br></pre></td></tr></table></figure><h3 id="12-2"><a href="#12-2" class="headerlink" title="12.2"></a>12.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlob</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type;</span><br><span class="line"></span><br><span class="line">    StrBlob():data(make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;()) &#123; &#125;</span><br><span class="line">    StrBlob(<span class="built_in">initializer_list</span>&lt;<span class="built_in">string</span>&gt; il):data(make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(il)) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;size(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;empty(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"pop_back on empty StrBlob"</span>);</span><br><span class="line">        data-&gt;pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span>&amp; <span class="title">front</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;front();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span>&amp; <span class="title">back</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;front();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg)</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= data-&gt;size()) <span class="keyword">throw</span> out_of_range(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="12-3"><a href="#12-3" class="headerlink" title="12.3"></a>12.3</h3><p><a href="https://stackoverflow.com/questions/20725190/operating-on-dynamic-memory-is-it-meaningful-to-overload-a-const-memeber-functi" target="_blank" rel="noopener">可以但没必要</a></p><h3 id="12-4"><a href="#12-4" class="headerlink" title="12.4"></a>12.4</h3><p><code>i</code> 是 <code>unsigned</code> 的</p><h3 id="12-5"><a href="#12-5" class="headerlink" title="12.5"></a>12.5</h3><p><strong>Pros</strong></p><ul><li>The compiler will not use this constructor <strong>in an automatic conversion</strong>.</li><li>We can realize clearly which class we have used.</li></ul><p><strong>Cons</strong></p><ul><li>We always uses the constructor to construct <strong>a temporary StrBlob object</strong>.</li><li>cannot use the copy form of initialization with an explicit constructor. not easy to use.</li></ul><h3 id="12-6"><a href="#12-6" class="headerlink" title="12.6"></a>12.6</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">read</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;* vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i; <span class="built_in">cin</span> &gt;&gt; i; vec-&gt;push_back(i));</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;* vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : *vec)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">delete</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(read(fun));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-7"><a href="#12-7" class="headerlink" title="12.7"></a>12.7</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> make_shared&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">read</span><span class="params">(share_ptr&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i; <span class="built_in">cin</span> &gt;&gt; i; vec-&gt;push_back(i));</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(share_ptr&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; vec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : *vec)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(read(fun));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-8"><a href="#12-8" class="headerlink" title="12.8"></a>12.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">b</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125; <span class="comment">// 内存泄漏</span></span><br></pre></td></tr></table></figure><h3 id="12-9"><a href="#12-9" class="headerlink" title="12.9"></a>12.9</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *q = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>), *r = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">100</span>);</span><br><span class="line">r = q; <span class="comment">// 100的内存没有释放</span></span><br><span class="line"><span class="keyword">auto</span> q2 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">42</span>), r2 = make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line">r2 = q2; <span class="comment">// 100的内存在计数器为0的情况下自动回收</span></span><br></pre></td></tr></table></figure><h3 id="12-10"><a href="#12-10" class="headerlink" title="12.10"></a>12.10</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"inside the process function:"</span> &lt;&lt; ptr.use_count() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; p(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">42</span>));</span><br><span class="line">    process(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt;(p));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p.use_count() &lt;&lt; <span class="string">"\n"</span> &lt;&lt; *p &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-11"><a href="#12-11" class="headerlink" title="12.11"></a>12.11</h3><p>函数内部可能会将 <code>p</code> 指向的内存释放，避免这种写法</p><h3 id="12-12"><a href="#12-12" class="headerlink" title="12.12"></a>12.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"inside the process function:"</span> &lt;&lt; ptr.use_count() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = <span class="keyword">new</span> <span class="keyword">int</span>();</span><br><span class="line">    <span class="keyword">auto</span> sp = make_shared&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    process(sp); <span class="comment">// 可以</span></span><br><span class="line">    process(<span class="keyword">new</span> <span class="keyword">int</span>()); <span class="comment">// 不允许隐式转换</span></span><br><span class="line">    process(p); <span class="comment">// 同上</span></span><br><span class="line">    process(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="keyword">int</span>&gt;(p)); <span class="comment">// 可以，但最好别这么写，因为可能会用到非法指针p</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-13"><a href="#12-13" class="headerlink" title="12.13"></a>12.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> sp = make_shared&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"><span class="keyword">auto</span> p = sp.get();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure><h3 id="12-14"><a href="#12-14" class="headerlink" title="12.14"></a>12.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">connection</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> ip;</span><br><span class="line">    <span class="keyword">int</span> port;</span><br><span class="line">    connection(<span class="built_in">string</span> ip_, <span class="keyword">int</span> port_):ip(ip_), port(port_)&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">destination</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> ip;</span><br><span class="line">    <span class="keyword">int</span> port;</span><br><span class="line">    destination(<span class="built_in">string</span> ip_, <span class="keyword">int</span> port_):ip(ip_), port(port_)&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">connection <span class="title">connect</span><span class="params">(destination* pDest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;connection&gt; pConn(<span class="keyword">new</span> connection(pDest-&gt;ip, pDest-&gt;port));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"creating connection("</span> &lt;&lt; pConn.use_count() &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> *pConn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(connection pConn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"connection close("</span> &lt;&lt; pConn.ip &lt;&lt; <span class="string">":"</span> &lt;&lt; pConn.port &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">end_connection</span><span class="params">(connection *pConn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    disconnect(*pConn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(destination &amp;d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    connection conn = connect(&amp;d);</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;connection&gt; p(&amp;conn, end_connection);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"connecting now("</span> &lt;&lt; p.use_count() &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">destination <span class="title">dest</span><span class="params">(<span class="string">"202.118.176.67"</span>, <span class="number">3316</span>)</span></span>;</span><br><span class="line">    f(dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-15"><a href="#12-15" class="headerlink" title="12.15"></a>12.15</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shared_ptr</span>&lt;connection&gt; p(&amp;conn, [](connection *pConn)&#123;</span><br><span class="line">    disconnect(*pConn);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="12-16"><a href="#12-16" class="headerlink" title="12.16"></a>12.16</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>; <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">unique_ptr</span>&lt;<span class="built_in">string</span>&gt; p1(<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">"string"</span>));</span><br><span class="line">    <span class="comment">// unique_ptr&lt;string&gt; p2(p1); // copy</span></span><br><span class="line">    <span class="comment">//                      ^</span></span><br><span class="line">    <span class="comment">// Error: Call to implicitly-deleted copy constructor of 'unique_ptr&lt;string&gt;'</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// unique_ptr&lt;string&gt; p3 = p1; // assign</span></span><br><span class="line">    <span class="comment">//                      ^</span></span><br><span class="line">    <span class="comment">// Error: Call to implicitly-deleted copy constructor of 'unique_ptr&lt;string&gt;'</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *p1 &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    p1.reset(<span class="literal">nullptr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-17-amp-12-18"><a href="#12-17-amp-12-18" class="headerlink" title="12.17 &amp; 12.18"></a>12.17 &amp; 12.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ix = <span class="number">1024</span>, *pi = &amp;ix, *pi2 = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2048</span>);</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; IntP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief  error: invalid conversion from 'int' to 'std::unique_ptr&lt;int&gt;::pointer &#123; aka int* &#125;' [-fpermissive]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//IntP p0(ix);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief The code below can compile, but will cause error at run time.</span></span><br><span class="line"><span class="comment">     *        The reason is that when the unique_ptr p1 is out of scope, delete will be called</span></span><br><span class="line"><span class="comment">     *        to free th object. But the object is not allocate using new.Thus, an error</span></span><br><span class="line"><span class="comment">     *        would be thrown by operating system.</span></span><br><span class="line"><span class="comment">     *  @badcode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//IntP p1(pi);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief This code can compile, but cause a dangling pointer at run time.</span></span><br><span class="line"><span class="comment">     *        The reason is that the unique_ptr will free the object the raw pointer</span></span><br><span class="line"><span class="comment">     *        is pointing to.</span></span><br><span class="line"><span class="comment">     * @badcode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//&#123; IntP p2(pi2); &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief   When the unique_ptr goes out of scope, it will call delete to free an</span></span><br><span class="line"><span class="comment">     *          obeject not allocated using new.</span></span><br><span class="line"><span class="comment">     * @badcode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//IntP p3(&amp;ix);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief   Recommended.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//IntP p4(new int(2048));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief   error:   double free or corruption at run time</span></span><br><span class="line"><span class="comment">     *          two unique_ptr are pointing to the same object. Thus, when both are out of</span></span><br><span class="line"><span class="comment">     *          scope, Operating system will throw double free or corruption.</span></span><br><span class="line"><span class="comment">     * @badcode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//IntP p2(new int(555));</span></span><br><span class="line">    <span class="comment">//IntP p5(p2.get());</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exercise 12.18:</span></span><br><span class="line"><span class="comment">// Why doesn’t shared_ptr have a release member?</span></span><br><span class="line"><span class="comment">//  Because other shared_ptr that points the same object can still delete this</span></span><br><span class="line"><span class="comment">//  object.Thus, it's meaningless to provide this member</span></span><br><span class="line"><span class="comment">//  more detail can be found a thread on Stack Overflow:</span></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/1525764/how-to-release-pointer-from-boostshared-ptr</span></span><br></pre></td></tr></table></figure><h3 id="12-19"><a href="#12-19" class="headerlink" title="12.19"></a>12.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlob</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    StrBlob() : data(<span class="built_in">std</span>::make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;()) &#123;&#125;</span><br><span class="line">    StrBlob(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="built_in">string</span>&gt; il) : data(<span class="built_in">std</span>::make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(il)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;size(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;empty(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"pop_back on empty StrBlob"</span>);</span><br><span class="line">        data-&gt;pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;front();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;front();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= data-&gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    StrBlobPtr() : curr(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    StrBlobPtr(StrBlob &amp;a, <span class="keyword">size_t</span> sz = <span class="number">0</span>) : wptr(a.data), curr(sz) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> StrBlobPtr &amp;p) &#123; <span class="keyword">return</span> p.curr != curr; &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> &amp;<span class="title">deref</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = check(curr, <span class="string">"dereference past end"</span>);</span><br><span class="line">        <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">StrBlobPtr &amp;<span class="title">incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(curr, <span class="string">"increment past end of StrBlobPtr"</span>);</span><br><span class="line">        ++curr;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; check(<span class="keyword">size_t</span> i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> ret = wptr.lock();</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"unbound StrBlobPtr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= ret-&gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::weak_ptr&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; wptr;</span><br><span class="line">    <span class="keyword">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">StrBlobPtr StrBlob::begin()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> StrBlobPtr(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrBlobPtr StrBlob::end()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> StrBlobPtr(*<span class="keyword">this</span>, data-&gt;size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-20"><a href="#12-20" class="headerlink" title="12.20"></a>12.20</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"../data/book.txt"</span>)</span></span>;</span><br><span class="line">    StrBlob blob;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span> str;getline(ifs,str);)</span><br><span class="line">        blob.push_back(str);</span><br><span class="line">    <span class="keyword">for</span>(StrBlobPtr pbeg(blob.begin()), pend(blob.end()); pbeg != pend; pbeg.incr())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pbeg.deref() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-21"><a href="#12-21" class="headerlink" title="12.21"></a>12.21</h3><p>这样写不好读，还是原版好</p><h3 id="12-22"><a href="#12-22" class="headerlink" title="12.22"></a>12.22</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路就是常对象调用常函数，所以会被调用的函数都改成常函数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstStrBlobPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConstStrBlobPtr() : curr(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    ConstStrBlobPtr(<span class="keyword">const</span> StrBlob &amp;a, <span class="keyword">size_t</span> sz = <span class="number">0</span>) : wptr(a.data), curr(sz) &#123;&#125; <span class="comment">// should add const</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(ConstStrBlobPtr &amp;p) &#123; <span class="keyword">return</span> p.curr != curr; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">deref</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// return value should add const</span></span><br><span class="line">        <span class="keyword">auto</span> p = check(curr, <span class="string">"dereference past end"</span>);</span><br><span class="line">        <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ConstStrBlobPtr &amp;<span class="title">incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(curr, <span class="string">"increment past end of StrBlobPtr"</span>);</span><br><span class="line">        ++curr;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; check(<span class="keyword">size_t</span> i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> ret = wptr.lock();</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"unbound StrBlobPtr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= ret-&gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::weak_ptr&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; wptr;</span><br><span class="line">    <span class="keyword">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ConstStrBlobPtr StrBlob::begin() <span class="keyword">const</span> <span class="comment">// should add const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ConstStrBlobPtr(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConstStrBlobPtr StrBlob::end() <span class="keyword">const</span> <span class="comment">// should add const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ConstStrBlobPtr(*<span class="keyword">this</span>, data-&gt;size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// and should add something into the class StrBlob</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstStrBlobPtr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlob</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstStrBlobPtr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// should add const</span></span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">// should add const</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-23"><a href="#12-23" class="headerlink" title="12.23"></a>12.23</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s1[] = <span class="string">"hello,"</span>;</span><br><span class="line">    <span class="keyword">char</span> s2[] = <span class="string">"world!"</span>;</span><br><span class="line">    <span class="keyword">char</span> *s = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s1) + <span class="built_in">strlen</span>(s2) + <span class="number">1</span>]();</span><br><span class="line">    <span class="built_in">strcat</span>(s, s1);</span><br><span class="line">    <span class="built_in">strcat</span>(s, s2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] s;</span><br><span class="line">    s = <span class="literal">nullptr</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// string</span></span><br><span class="line">    string str1("hello,"), str2("world!");</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str1 + str2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-24"><a href="#12-24" class="headerlink" title="12.24"></a>12.24</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用空白字符分隔</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">charUp</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">const</span> <span class="keyword">size_t</span> &amp;oldSize, <span class="keyword">const</span> <span class="keyword">size_t</span> &amp;newSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *newBlock = <span class="keyword">new</span> <span class="keyword">char</span>[newSize]();</span><br><span class="line">    <span class="keyword">if</span> (!p)</span><br><span class="line">        <span class="keyword">return</span> newBlock;</span><br><span class="line">    <span class="built_in">memcpy</span>(newBlock, p, oldSize);</span><br><span class="line">    <span class="keyword">delete</span>[] p;</span><br><span class="line">    p = newBlock;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch, *str = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">size_t</span> sizeSt = <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">size_t</span> i = <span class="number">0</span>, length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; noskipws &amp;&amp; !<span class="built_in">isspace</span>(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == length)</span><br><span class="line">        &#123;</span><br><span class="line">            length += sizeSt;</span><br><span class="line">            str = charUp(str, i, length);</span><br><span class="line">            <span class="keyword">if</span> (!str)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Could not allocate memory!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str[i++] = ch;</span><br><span class="line">    &#125;</span><br><span class="line">    str[i] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(str) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] str;</span><br><span class="line">    str = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-25"><a href="#12-25" class="headerlink" title="12.25"></a>12.25</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>[] pa;</span><br></pre></td></tr></table></figure><h3 id="12-26"><a href="#12-26" class="headerlink" title="12.26"></a>12.26</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    allocator&lt;<span class="built_in">string</span>&gt; a;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">const</span> p = a.allocate(n);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">auto</span> q = p;</span><br><span class="line">    <span class="keyword">while</span> (q != p + n &amp;&amp; <span class="built_in">cin</span> &gt;&gt; s)</span><br><span class="line">        a.construct(q++, s);</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (q != p)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *--q &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        a.destroy(q);</span><br><span class="line">    &#125;</span><br><span class="line">    a.deallocate(p, n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-27-amp-12-30"><a href="#12-27-amp-12-30" class="headerlink" title="12.27 &amp; 12.30"></a>12.27 &amp; 12.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextQuery</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> LineNo = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type;</span><br><span class="line">    TextQuery(ifstream &amp;);</span><br><span class="line">    <span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; input;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;LineNo&gt;&gt;&gt; result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;, <span class="keyword">const</span> QueryResult &amp;)</span></span>;</span><br><span class="line">    QueryResult(<span class="built_in">string</span> s, <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;TextQuery::LineNo&gt;&gt; ns, <span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; in) : word(s), nos(ns), input(in)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;TextQuery::LineNo&gt;&gt; nos;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; input;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TextQuery::TextQuery(ifstream &amp;infile) : input(<span class="keyword">new</span> <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;)</span><br><span class="line">&#123;</span><br><span class="line">    LineNo lineNo&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> line; getline(infile, line); lineNo++)</span><br><span class="line">    &#123;</span><br><span class="line">        input-&gt;push_back(line);</span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">s_line</span><span class="params">(line)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> text, word; s_line &gt;&gt; text; word.clear())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// avoid "word, "</span></span><br><span class="line">            remove_copy_if(text.begin(), text.end(), back_inserter(word), ptr_fun&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">ispunct</span>));</span><br><span class="line">            <span class="keyword">auto</span> &amp;nos = result[word];</span><br><span class="line">            <span class="keyword">if</span> (!nos)</span><br><span class="line">                nos.reset(<span class="keyword">new</span> <span class="built_in">set</span>&lt;LineNo&gt;);</span><br><span class="line">            nos-&gt;insert(lineNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueryResult TextQuery::query(<span class="keyword">const</span> <span class="built_in">string</span> &amp;str) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// use static just allocate once</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;LineNo&gt;&gt; nodata(<span class="keyword">new</span> <span class="built_in">set</span>&lt;LineNo&gt;);</span><br><span class="line">    <span class="keyword">auto</span> found = result.find(str);</span><br><span class="line">    <span class="keyword">if</span> (found == result.end())</span><br><span class="line">        <span class="keyword">return</span> QueryResult(str, nodata, input);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> QueryResult(str, found-&gt;second, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;out, <span class="keyword">const</span> QueryResult &amp;qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    out &lt;&lt; qr.word &lt;&lt; <span class="string">" occurt: "</span> &lt;&lt; qr.nos-&gt;size() &lt;&lt; <span class="string">" "</span> &lt;&lt; (qr.nos-&gt;size() &gt; <span class="number">1</span> ? <span class="string">"times"</span> : <span class="string">"time"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : *qr.nos)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t(line "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">") "</span> &lt;&lt; qr.input-&gt;at(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runQuery</span><span class="params">(ifstream &amp;infile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a word to look for, or 'q' to quit\n"</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">cin</span> &gt;&gt; s) || s == <span class="string">"q"</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        print(<span class="built_in">cout</span>, tq.query(s)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"D:/WorkSpace/C++/data.txt"</span>)</span></span>;</span><br><span class="line">    runQuery(ifs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-28"><a href="#12-28" class="headerlink" title="12.28"></a>12.28</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"D:/WorkSpace/C++/data.txt"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; input;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">set</span>&lt;<span class="keyword">decltype</span>(input.size())&gt;&gt; dict;</span><br><span class="line">    <span class="keyword">decltype</span>(input.size()) lineNo&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> line; getline(ifs, line); lineNo++)</span><br><span class="line">    &#123;</span><br><span class="line">        input.push_back(line);</span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">s_line</span><span class="params">(line)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> text, word; s_line &gt;&gt; text; word.clear())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// avoid "word, "</span></span><br><span class="line">            remove_copy_if(text.begin(), text.end(), back_inserter(word), ptr_fun&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">ispunct</span>));</span><br><span class="line">            dict[word].insert(lineNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a word to look for, or 'q' to quit\n"</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">cin</span> &gt;&gt; s) || s == <span class="string">"q"</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> found = dict.find(s);</span><br><span class="line">        <span class="keyword">if</span> (found == dict.end())</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" occurt: "</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">" "</span></span><br><span class="line">                 &lt;&lt; <span class="string">"time"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" occurt: "</span> &lt;&lt; found-&gt;second.size() &lt;&lt; <span class="string">" "</span> &lt;&lt; (found-&gt;second.size() &gt; <span class="number">1</span> ? <span class="string">"times"</span> : <span class="string">"time"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> i : found-&gt;second)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t(line "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">") "</span> &lt;&lt; input.at(i) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-29"><a href="#12-29" class="headerlink" title="12.29"></a>12.29</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In terms of narrative order, I perfer do while</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a word to look for, or 'q' to quit\n"</span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="built_in">cin</span> &gt;&gt; s) || s == <span class="string">"q"</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    print(<span class="built_in">cout</span>, tq.query(s)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">while</span> (<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="12-31"><a href="#12-31" class="headerlink" title="12.31"></a>12.31</h3><p>vector代替set后，同一行多次出现的单词会重复进入存储空间，使用set能使得序列中同一元素唯一</p><h3 id="12-32"><a href="#12-32" class="headerlink" title="12.32"></a>12.32</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstStrBlobPtr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlob</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> size_type = <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::size_type;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstStrBlobPtr</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// should add const</span></span><br><span class="line">    <span class="function">ConstStrBlobPtr <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span></span>;   <span class="comment">// should add const</span></span><br><span class="line"></span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    StrBlob() : data(<span class="built_in">std</span>::make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;()) &#123;&#125;</span><br><span class="line">    StrBlob(<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="built_in">string</span>&gt; il) : data(<span class="built_in">std</span>::make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(il)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;size(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> data-&gt;empty(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;t)</span> </span>&#123; data-&gt;push_back(t); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"pop_back on empty StrBlob"</span>);</span><br><span class="line">        data-&gt;pop_back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">front</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;front();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"front on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;front();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> &amp;<span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(<span class="number">0</span>, <span class="string">"back on empty StrBlob"</span>);</span><br><span class="line">        <span class="keyword">return</span> data-&gt;back();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">(size_type i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= data-&gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlobPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    StrBlobPtr() : curr(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    StrBlobPtr(StrBlob &amp;a, <span class="keyword">size_t</span> sz = <span class="number">0</span>) : wptr(a.data), curr(sz) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> StrBlobPtr &amp;p) &#123; <span class="keyword">return</span> p.curr != curr; &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> &amp;<span class="title">deref</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> p = check(curr, <span class="string">"dereference past end"</span>);</span><br><span class="line">        <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">StrBlobPtr &amp;<span class="title">incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(curr, <span class="string">"increment past end of StrBlobPtr"</span>);</span><br><span class="line">        ++curr;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; check(<span class="keyword">size_t</span> i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> ret = wptr.lock();</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"unbound StrBlobPtr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= ret-&gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::weak_ptr&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; wptr;</span><br><span class="line">    <span class="keyword">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConstStrBlobPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ConstStrBlobPtr() : curr(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    ConstStrBlobPtr(<span class="keyword">const</span> StrBlob &amp;a, <span class="keyword">size_t</span> sz = <span class="number">0</span>) : wptr(a.data), curr(sz) &#123;&#125; <span class="comment">// should add const</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(ConstStrBlobPtr &amp;p) &#123; <span class="keyword">return</span> p.curr != curr; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="title">deref</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">// return value should add const</span></span><br><span class="line">        <span class="keyword">auto</span> p = check(curr, <span class="string">"dereference past end"</span>);</span><br><span class="line">        <span class="keyword">return</span> (*p)[curr];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ConstStrBlobPtr &amp;<span class="title">incr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        check(curr, <span class="string">"increment past end of StrBlobPtr"</span>);</span><br><span class="line">        ++curr;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; check(<span class="keyword">size_t</span> i, <span class="keyword">const</span> <span class="built_in">string</span> &amp;msg) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> ret = wptr.lock();</span><br><span class="line">        <span class="keyword">if</span> (!ret)</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"unbound StrBlobPtr"</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= ret-&gt;size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::out_of_range(msg);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::weak_ptr&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; wptr;</span><br><span class="line">    <span class="keyword">size_t</span> curr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">StrBlobPtr StrBlob::begin()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> StrBlobPtr(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StrBlobPtr StrBlob::end()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> StrBlobPtr(*<span class="keyword">this</span>, data-&gt;size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConstStrBlobPtr StrBlob::begin() <span class="keyword">const</span> <span class="comment">// should add const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ConstStrBlobPtr(*<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConstStrBlobPtr StrBlob::end() <span class="keyword">const</span> <span class="comment">// should add const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ConstStrBlobPtr(*<span class="keyword">this</span>, data-&gt;size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextQuery</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TextQuery(ifstream &amp;);</span><br><span class="line">    <span class="function">QueryResult <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    StrBlob input;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;StrBlob::size_type&gt;&gt;&gt; result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;, <span class="keyword">const</span> QueryResult &amp;)</span></span>;</span><br><span class="line">    QueryResult(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;StrBlob::size_type&gt;&gt; ns, <span class="keyword">const</span> StrBlob &amp;in) : word(s), nos(ns), input(in)&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;StrBlob::size_type&gt;&gt; nos;</span><br><span class="line">    StrBlob input;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TextQuery::TextQuery(ifstream &amp;infile)</span><br><span class="line">&#123;</span><br><span class="line">    StrBlob::size_type lineNo&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">string</span> line; getline(infile, line); ++lineNo)</span><br><span class="line">    &#123;</span><br><span class="line">        input.push_back(line);</span><br><span class="line">        <span class="function"><span class="built_in">istringstream</span> <span class="title">s_line</span><span class="params">(line)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">string</span> text, word; s_line &gt;&gt; text; word.clear())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// avoid "word, "</span></span><br><span class="line">            remove_copy_if(text.begin(), text.end(), back_inserter(word), ptr_fun&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">ispunct</span>));</span><br><span class="line">            <span class="keyword">auto</span> &amp;nos = result[word];</span><br><span class="line">            <span class="keyword">if</span> (!nos)</span><br><span class="line">                nos.reset(<span class="keyword">new</span> <span class="built_in">set</span>&lt;StrBlob::size_type&gt;);</span><br><span class="line">            nos-&gt;insert(lineNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QueryResult TextQuery::query(<span class="keyword">const</span> <span class="built_in">string</span> &amp;str) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// use static just allocate once</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;StrBlob::size_type&gt;&gt; nodata(<span class="keyword">new</span> <span class="built_in">set</span>&lt;StrBlob::size_type&gt;);</span><br><span class="line">    <span class="keyword">auto</span> found = result.find(str);</span><br><span class="line">    <span class="keyword">if</span> (found == result.end())</span><br><span class="line">        <span class="keyword">return</span> QueryResult(str, nodata, input);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> QueryResult(str, found-&gt;second, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;out, <span class="keyword">const</span> QueryResult &amp;qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    out &lt;&lt; qr.word &lt;&lt; <span class="string">" occurt: "</span> &lt;&lt; qr.nos-&gt;size() &lt;&lt; <span class="string">" "</span> &lt;&lt; (qr.nos-&gt;size() &gt; <span class="number">1</span> ? <span class="string">"times"</span> : <span class="string">"time"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i : *qr.nos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">ConstStrBlobPtr <span class="title">p</span><span class="params">(qr.input, i)</span></span>;</span><br><span class="line">        <span class="built_in">cout</span></span><br><span class="line">            &lt;&lt; <span class="string">"\t(line "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">") "</span> &lt;&lt; p.deref() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">runQuery</span><span class="params">(ifstream &amp;infile)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">TextQuery <span class="title">tq</span><span class="params">(infile)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input a word to look for, or 'q' to quit\n"</span>;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">cin</span> &gt;&gt; s) || s == <span class="string">"q"</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        print(<span class="built_in">cout</span>, tq.query(s)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"D:/WorkSpace/C++/data.txt"</span>)</span></span>;</span><br><span class="line">    runQuery(ifs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-33"><a href="#12-33" class="headerlink" title="12.33"></a>12.33</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryResult</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">using</span> ResultIter = <span class="built_in">set</span>&lt;StrBlob::size_type&gt;::iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> ostream &amp;<span class="title">print</span><span class="params">(ostream &amp;, <span class="keyword">const</span> QueryResult &amp;)</span></span>;</span><br><span class="line">    QueryResult(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;StrBlob::size_type&gt;&gt; ns, <span class="keyword">const</span> StrBlob &amp;in) : word(s), nos(ns), input(in)&#123;&#125;;</span><br><span class="line">    <span class="function">ResultIter <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> nos-&gt;begin(); &#125;</span><br><span class="line">    <span class="function">ResultIter <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> nos-&gt;end(); &#125;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;StrBlob&gt; get_file() <span class="keyword">const</span> &#123; <span class="keyword">return</span> make_shared&lt;StrBlob&gt;(input); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;<span class="built_in">set</span>&lt;StrBlob::size_type&gt;&gt; nos;</span><br><span class="line">    StrBlob input;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="第十三章"><a href="#第十三章" class="headerlink" title="第十三章"></a>第十三章</h2><h3 id="13-1"><a href="#13-1" class="headerlink" title="13.1"></a>13.1</h3><p>拷贝构造函数是第一个参数是当前类的引用，其它参数都有默认值的函数</p><p>当拷贝初始化发生：</p><ul><li>使用 <code>=</code> 定义一个变量</li><li>将对象作为参数传给非引用类型形参</li><li>从非引用类型返回值的函数返回对象</li><li>用花括号列表（List Initialization）初始化聚合类的成员或者数组中的元素</li><li>某些类类型还会为所分配的对象使用拷贝初始化</li></ul><h3 id="13-2"><a href="#13-2" class="headerlink" title="13.2"></a>13.2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sales_data::Sales_data(Sales_data rhs);</span><br><span class="line"><span class="comment">// Infinite loop</span></span><br></pre></td></tr></table></figure><h3 id="13-3"><a href="#13-3" class="headerlink" title="13.3"></a>13.3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add a function</span></span><br><span class="line"><span class="function"><span class="keyword">short</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data.use_count(); <span class="comment">// in StrBlob</span></span><br><span class="line">    <span class="comment">// return wptr.use_count(); in StrBlobPtr</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">StrBlob <span class="title">str</span><span class="params">(&#123; <span class="string">"hello"</span>, <span class="string">"world"</span> &#125;)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before: "</span> &lt;&lt; str.count() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 1</span></span><br><span class="line">    <span class="function">StrBlob <span class="title">str_cp</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after: "</span> &lt;&lt; str.count() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">p</span><span class="params">(str)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"before: "</span> &lt;&lt; p.count() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 2</span></span><br><span class="line">    <span class="function">StrBlobPtr <span class="title">p_cp</span><span class="params">(p)</span></span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"after: "</span> &lt;&lt; p.count() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 2 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-4"><a href="#13-4" class="headerlink" title="13.4"></a>13.4</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Point global;</span><br><span class="line"><span class="function">Point <span class="title">foo_bar</span><span class="params">(Point arg)</span><span class="comment">// 1</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Point local = arg, *heap = <span class="keyword">new</span> Point(global);<span class="comment">// 2 3</span></span><br><span class="line">    *heap = local;</span><br><span class="line">    Point pa[ <span class="number">4</span> ] = &#123; local, *heap &#125;;<span class="comment">// 4 5</span></span><br><span class="line">    <span class="keyword">return</span> *heap; <span class="comment">// 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-5"><a href="#13-5" class="headerlink" title="13.5"></a>13.5</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;hp) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), i(ps.i) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-6"><a href="#13-6" class="headerlink" title="13.6"></a>13.6</h3><ol><li>拷贝赋值运算符是函数，通常命名为 <code>operator=</code> ， 参数与类相同</li><li>当赋值时发生</li><li>合成拷贝赋值运算符如果不是 <code>private</code> 等禁止状态，则会将右侧相应成员赋值给左侧</li><li>当该类没有定义自己的拷贝赋值运算符</li></ol><h3 id="13-7"><a href="#13-7" class="headerlink" title="13.7"></a>13.7</h3><p>都会浅拷贝， <code>use_count</code> 会发生与  <code>13.3</code> 一样的情况</p><h3 id="13-8"><a href="#13-8" class="headerlink" title="13.8"></a>13.8</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;hp) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), i(hp.i) &#123;&#125;</span><br><span class="line">    HasPtr &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> *s = <span class="keyword">new</span> <span class="built_in">string</span>(*right.ps);</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">            ps = s;</span><br><span class="line">            i = right.i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *ps &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        *ps = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HasPtr a("world"), b;</span><br><span class="line">    a.pr(), b.pr();</span><br><span class="line">    b = a;</span><br><span class="line">    a.change(<span class="string">"hello"</span>);</span><br><span class="line">    a.pr(), b.pr();</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-9"><a href="#13-9" class="headerlink" title="13.9"></a>13.9</h3><ol><li>析构函数是类名以 <code>~</code> 为前缀的成员函数</li><li>对某些类可以放进 <code>private</code> 里控制类禁止被销毁，一般函数体内就是空的</li><li>当类没有定义自己的析构函数的时候</li></ol><h3 id="13-10"><a href="#13-10" class="headerlink" title="13.10"></a>13.10</h3><ol><li><code>StrBlob</code> ：<code>use_count</code> 递减，如果动态对象已经没有 <code>shared_ptr</code> 的指向，则销毁</li><li><code>StrBlobPtr</code> ：直接销毁，指向对象不析构</li></ol><h3 id="13-11"><a href="#13-11" class="headerlink" title="13.11"></a>13.11</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    ~HasPtr() &#123; <span class="keyword">delete</span> ps; &#125; <span class="comment">// add: delete ps;</span></span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;hp) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), i(hp.i) &#123;&#125;</span><br><span class="line">    HasPtr &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> *s = <span class="keyword">new</span> <span class="built_in">string</span>(*right.ps);</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">            ps = s;</span><br><span class="line">            i = right.i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *ps &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        *ps = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-12"><a href="#13-12" class="headerlink" title="13.12"></a>13.12</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fun</span><span class="params">(<span class="keyword">const</span> Sales_data *trans, Sales_data accum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Sales_data item1(*trans), item2(accum);</span><br><span class="line">    <span class="keyword">return</span> item1.isbn() != item2.isbn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3: accum, item1, item2</span></span><br></pre></td></tr></table></figure><h3 id="13-13"><a href="#13-13" class="headerlink" title="13.13"></a>13.13</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    X() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"X()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    X(<span class="keyword">const</span> X &amp;) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"X(const X&amp;)"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">    X &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> X &amp;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"X&amp; operator="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~X() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"~X()"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> X &amp;rx, X x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;X&gt; vec;</span><br><span class="line">    vec.reserve(<span class="number">2</span>);</span><br><span class="line">    vec.push_back(rx);</span><br><span class="line">    vec.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    X *ps = <span class="keyword">new</span> X;</span><br><span class="line">    X a;</span><br><span class="line">    *ps = a;</span><br><span class="line">    f(*ps, *ps);</span><br><span class="line">    <span class="keyword">delete</span> ps;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-14"><a href="#13-14" class="headerlink" title="13.14"></a>13.14</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span> <span class="params">(numbered s)</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; s.mysn &lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line">numbered a, b = a, c = b;</span><br><span class="line">f(a); f(b); f(c);</span><br><span class="line"><span class="comment">// Three identical numbers</span></span><br></pre></td></tr></table></figure><h3 id="13-15"><a href="#13-15" class="headerlink" title="13.15"></a>13.15</h3><p>拷贝构造函数会生成新的序号，最后会输出三个不同的序号，并且并非是我们想要的 <code>a</code>, <code>b</code>, <code>c</code>的编号，因为进入 <code>f()</code> 时还会进行一次拷贝构造</p><h3 id="13-16"><a href="#13-16" class="headerlink" title="13.16"></a>13.16</h3><p>会改变，因为 <code>f()</code> 传参不用调用拷贝构造函数了，此次输出的序号就是我们想要的 <code>a</code>, <code>b</code>, <code>c</code>的编号</p><h3 id="13-17"><a href="#13-17" class="headerlink" title="13.17"></a>13.17</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">numbered</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    numbered()</span><br><span class="line">    &#123;</span><br><span class="line">        mysn = unique++;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 13.15 add the function</span></span><br><span class="line">    numbered(<span class="keyword">const</span> numbered &amp;temp)</span><br><span class="line">    &#123;</span><br><span class="line">        mysn = unique++;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> mysn;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> unique;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numbered::unique = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 13.16 add const .. &amp;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> numbered &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s.mysn &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    numbered a, b = a, c = b;</span><br><span class="line">    f(a);</span><br><span class="line">    f(b);</span><br><span class="line">    f(c);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-18"><a href="#13-18" class="headerlink" title="13.18"></a>13.18</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Employee();</span><br><span class="line">    Employee(<span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"Me"</span>) : name(s) &#123; id = num++; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">" "</span></span><br><span class="line">                  &lt;&lt; name &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Employee::num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Employee a;</span><br><span class="line">    Employee b;</span><br><span class="line">    a.print();</span><br><span class="line">    b.print();</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-19"><a href="#13-19" class="headerlink" title="13.19"></a>13.19</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no, because there really is no sensible meaning. employee can't copy in real world.</span></span><br><span class="line"></span><br><span class="line">Employee(<span class="keyword">const</span> Employee&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">Employee&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Employee&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><h3 id="13-20"><a href="#13-20" class="headerlink" title="13.20"></a>13.20</h3><p><code>TextQuery</code> 和 <code>QueryResult</code> 的成员是用智能指针来管理动态内存，因此当我们拷贝、赋值或销毁类对象的时候引用计数会发生改变乃至被销毁</p><h3 id="13-21"><a href="#13-21" class="headerlink" title="13.21"></a>13.21</h3><p>不需要，因为 <code>TextQuery</code> 和 <code>QueryResult</code> 的成员是用智能指针来管理动态内存的</p><h3 id="13-22-amp-13-23"><a href="#13-22-amp-13-23" class="headerlink" title="13.22 &amp; 13.23"></a>13.22 &amp; 13.23</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">    ~HasPtr() &#123; <span class="keyword">delete</span> ps; &#125;</span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;hp) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(*hp.ps)), i(hp.i) &#123;&#125;</span><br><span class="line">    HasPtr &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// delete "if (this != &amp;right)"</span></span><br><span class="line">        <span class="built_in">string</span> *s = <span class="keyword">new</span> <span class="built_in">string</span>(*right.ps);</span><br><span class="line">        <span class="keyword">delete</span> ps;</span><br><span class="line">        ps = s;</span><br><span class="line">        i = right.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-24"><a href="#13-24" class="headerlink" title="13.24"></a>13.24</h3><p>没有析构函数，合成的析构函数将不会释放内存</p><p>没有构造拷贝函数，合成的函数将默认使用指针赋值，两个指针将指向同一个对象</p><h3 id="13-25"><a href="#13-25" class="headerlink" title="13.25"></a>13.25</h3><p>两个函数需要在拷贝的时候新开内存给智能指针，而不是共享对象，不用析构函数是因为智能指针会自动在合成析构函数中被释放，如果 <code>use_count()</code> 为 <code>0</code> 的话</p><h3 id="13-26"><a href="#13-26" class="headerlink" title="13.26"></a>13.26</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrBlob</span>&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// copy constructor</span></span><br><span class="line">    StrBlob(<span class="keyword">const</span> StrBlob &amp;sb) : data(make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(*sb.data)) &#123;&#125;</span><br><span class="line">    <span class="comment">// copyassignment operators</span></span><br><span class="line">    StrBlob &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> StrBlob &amp;sb)</span><br><span class="line">    &#123;</span><br><span class="line">        data = make_shared&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;(*sb.data);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-27"><a href="#13-27" class="headerlink" title="13.27"></a>13.27</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span>&#123;</span></span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>), use(<span class="keyword">new</span> <span class="keyword">size_t</span>(<span class="number">1</span>))&#123;&#125;</span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;p) : ps(p.ps), i(p.i), use(p.use)&#123;++*use;&#125;</span><br><span class="line">    HasPtr&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr&amp; rhs)&#123;</span><br><span class="line">        ++*rhs.use;</span><br><span class="line">        <span class="keyword">if</span>(--*use == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">        &#125;</span><br><span class="line">        ps = rhs.ps;</span><br><span class="line">        use = rhs.use;</span><br><span class="line">        i = rhs.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~HasPtr()&#123;</span><br><span class="line">        <span class="keyword">if</span>(--*use == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">size_t</span> *use;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-28"><a href="#13-28" class="headerlink" title="13.28"></a>13.28</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (a)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    TreeNode() : value(<span class="built_in">string</span>()), count(<span class="number">0</span>), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    TreeNode(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s, <span class="keyword">int</span> c) : value(s), count(c), left(<span class="literal">nullptr</span>), right(<span class="literal">nullptr</span>)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    ~TreeNode()&#123;</span><br><span class="line"><span class="keyword">delete</span> left;</span><br><span class="line"><span class="keyword">delete</span> right;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    TreeNode(<span class="keyword">const</span> TreeNode &amp;rhs) ; value(rhs.value), count(rhs.count)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rhs.left)</span><br><span class="line">            left = <span class="keyword">new</span> TreeNode(*rhs.left);</span><br><span class="line">        <span class="keyword">if</span>(rhs.right)</span><br><span class="line">            right = <span class="keyword">new</span> TreeNode(*rhs.right);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    TreeNode &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> TreeNode &amp;rhs)&#123;</span><br><span class="line">        value = rhs.value;</span><br><span class="line">        count = rhs.count;</span><br><span class="line">        TreeNode *temp = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(rhs.left)</span><br><span class="line">            temp = <span class="keyword">new</span> TreeNode(*rhs.left);</span><br><span class="line">        <span class="keyword">delete</span> left;</span><br><span class="line">        left = temp;</span><br><span class="line">    </span><br><span class="line">        temp = <span class="literal">nullptr</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(rhs.right)</span><br><span class="line">            temp = <span class="keyword">new</span> TreeNode(*rhs.right);</span><br><span class="line">        <span class="keyword">delete</span> right;</span><br><span class="line">        right = temp;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> value;</span><br><span class="line">    <span class="keyword">int</span>count;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (b)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinStrTree</span>&#123;</span></span><br><span class="line">    BinStrTree(<span class="keyword">const</span> TreeNode &amp;t = TreeNode()) : root(<span class="keyword">new</span> TreeNode(t)), use(<span class="keyword">new</span> <span class="keyword">size_t</span>(<span class="number">1</span>))&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    BinStrTree(<span class="keyword">const</span> BinStrTree &amp;rhs) : root(<span class="keyword">new</span> TreeNode(*rhs.root)), use(rhs.use)&#123;++*use;&#125;</span><br><span class="line">  </span><br><span class="line">    ~BinStrTree()&#123;</span><br><span class="line">        <span class="keyword">if</span>(--*use == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> root;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    BinStrTree&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> BinStrTree&amp; rhs)&#123;</span><br><span class="line">        ++*rhs.use;</span><br><span class="line">        <span class="keyword">if</span>(--*use == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">            <span class="keyword">delete</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        root = rhs.root;</span><br><span class="line">        use = rhs.use;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TreeNode *root;</span><br><span class="line">    <span class="keyword">size_t</span> *use;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="13-29"><a href="#13-29" class="headerlink" title="13.29"></a>13.29</h3><p><code>swap(lhs.ps, rhs.ps);</code> : <code>swap(string*, string*)</code></p><p><code>swap(lhs.i, rhs.i);</code> : <code>swap(int, int)</code></p><h3 id="13-30"><a href="#13-30" class="headerlink" title="13.30"></a>13.30</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>), use(<span class="keyword">new</span> <span class="keyword">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;p) : ps(p.ps), i(p.i), use(p.use) &#123; ++*use; &#125;</span><br><span class="line">    HasPtr &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> HasPtr &amp;rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        ++*rhs.use;</span><br><span class="line">        <span class="keyword">if</span> (--*use == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">        &#125;</span><br><span class="line">        ps = rhs.ps;</span><br><span class="line">        use = rhs.use;</span><br><span class="line">        i = rhs.i;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~HasPtr()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (--*use == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(HasPtr &amp;, HasPtr &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">size_t</span> *use;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(HasPtr &amp;lhs, HasPtr &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    swap(lhs.ps, rhs.ps);</span><br><span class="line">    swap(lhs.i, rhs.i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"call swap(HasPtr&amp; lhs, HasPtr&amp; rhs)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-31"><a href="#13-31" class="headerlink" title="13.31"></a>13.31</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HasPtr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    HasPtr(<span class="keyword">const</span> <span class="built_in">string</span> &amp;s = <span class="built_in">string</span>()) : ps(<span class="keyword">new</span> <span class="built_in">string</span>(s)), i(<span class="number">0</span>), use(<span class="keyword">new</span> <span class="keyword">size_t</span>(<span class="number">1</span>)) &#123;&#125;</span><br><span class="line">    HasPtr(<span class="keyword">const</span> HasPtr &amp;p) : ps(p.ps), i(p.i), use(p.use) &#123; ++*use; &#125;</span><br><span class="line">    HasPtr &amp;<span class="keyword">operator</span>=(HasPtr rhs)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(*<span class="keyword">this</span>, rhs);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~HasPtr()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (--*use == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> use;</span><br><span class="line">            <span class="keyword">delete</span> ps;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *ps &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> HasPtr &amp;lhs, <span class="keyword">const</span> HasPtr &amp;rhs);</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(HasPtr &amp;, HasPtr &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> *ps;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">size_t</span> *use;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(HasPtr &amp;lhs, HasPtr &amp;rhs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    swap(lhs.ps, rhs.ps);</span><br><span class="line">    swap(lhs.i, rhs.i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"call swap(HasPtr&amp; lhs, HasPtr&amp; rhs)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> HasPtr &amp;lhs, <span class="keyword">const</span> HasPtr &amp;rhs)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *lhs.ps &lt; *rhs.ps;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HasPtr s&#123;<span class="string">"s"</span>&#125;, a&#123;<span class="string">"a"</span>&#125;, c&#123;<span class="string">"c"</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;HasPtr&gt; vec&#123;s, a, c&#125;;</span><br><span class="line">    sort(vec.begin(), vec.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> <span class="keyword">const</span> &amp;elem : vec)</span><br><span class="line">        elem.show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-32"><a href="#13-32" class="headerlink" title="13.32"></a>13.32</h3><p>不会， <code>swap</code> 函数的益处本质在于交换指针而避免额外的内存开销，类指针的 <code>HasPtr</code> 版本就是指针交换</p><h3 id="13-33"><a href="#13-33" class="headerlink" title="13.33"></a>13.33</h3><p>这将会是一个新的开始</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
